package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/google/uuid"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/mappers"
	"github.com/twirapp/twir/apps/api-gql/internal/services/alerts"
)

// ChannelAlertsCreate is the resolver for the channelAlertsCreate field.
func (r *mutationResolver) ChannelAlertsCreate(ctx context.Context, input gqlmodel.ChannelAlertCreateInput) (*gqlmodel.ChannelAlert, error) {
	dashboardId, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	user, err := r.deps.Sessions.GetAuthenticatedUser(ctx)
	if err != nil {
		return nil, err
	}

	volume := 100
	if input.AudioVolume.IsSet() {
		volume = *input.AudioVolume.Value()
	}

	alert, err := r.deps.AlertsService.Create(
		ctx,
		alerts.CreateInput{
			ChannelID:    dashboardId,
			ActorID:      user.ID,
			Name:         input.Name,
			AudioID:      input.AudioID.Value(),
			AudioVolume:  volume,
			CommandIDS:   input.CommandIds.Value(),
			RewardIDS:    input.RewardIds.Value(),
			GreetingsIDS: input.GreetingsIds.Value(),
			KeywordsIDS:  input.KeywordsIds.Value(),
		},
	)

	converted := mappers.AlertEntityTo(alert)
	return &converted, nil
}

// ChannelAlertsUpdate is the resolver for the channelAlertsUpdate field.
func (r *mutationResolver) ChannelAlertsUpdate(ctx context.Context, id uuid.UUID, input gqlmodel.ChannelAlertUpdateInput) (*gqlmodel.ChannelAlert, error) {
	dashboardId, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	user, err := r.deps.Sessions.GetAuthenticatedUser(ctx)
	if err != nil {
		return nil, err
	}

	alert, err := r.deps.AlertsService.Update(
		ctx,
		id,
		alerts.UpdateInput{
			ChannelID:    dashboardId,
			ActorID:      user.ID,
			Name:         input.Name.Value(),
			AudioID:      input.AudioID.Value(),
			AudioVolume:  input.AudioVolume.Value(),
			CommandIDS:   input.CommandIds.Value(),
			RewardIDS:    input.RewardIds.Value(),
			GreetingsIDS: input.GreetingsIds.Value(),
			KeywordsIDS:  input.KeywordsIds.Value(),
		},
	)

	converted := mappers.AlertEntityTo(alert)
	return &converted, nil
}

// ChannelAlertsDelete is the resolver for the channelAlertsDelete field.
func (r *mutationResolver) ChannelAlertsDelete(ctx context.Context, id uuid.UUID) (bool, error) {
	dashboardId, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	user, err := r.deps.Sessions.GetAuthenticatedUser(ctx)
	if err != nil {
		return false, err
	}

	err = r.deps.AlertsService.Delete(ctx, id, dashboardId, user.ID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// ChannelAlerts is the resolver for the channelAlerts  field.
func (r *queryResolver) ChannelAlerts(ctx context.Context) ([]gqlmodel.ChannelAlert, error) {
	dashboardId, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	dbAlerts, err := r.deps.AlertsService.GetManyByChannelID(ctx, dashboardId)
	if err != nil {
		return nil, err
	}

	result := make([]gqlmodel.ChannelAlert, 0, len(dbAlerts))
	for _, a := range dbAlerts {
		result = append(result, mappers.AlertEntityTo(a))
	}

	return result, nil
}
