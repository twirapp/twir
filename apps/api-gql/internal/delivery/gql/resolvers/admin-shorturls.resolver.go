package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"

	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/dataloader"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/graph"
	"github.com/twirapp/twir/apps/api-gql/internal/services/shortenedurls"
)

// UserProfile is the resolver for the userProfile field.
func (r *adminShortUrlResolver) UserProfile(ctx context.Context, obj *gqlmodel.AdminShortURL) (*gqlmodel.TwirUserTwitchInfo, error) {
	if obj.UserID == nil {
		return nil, nil
	}

	return dataloader.GetHelixUserById(ctx, *obj.UserID)
}

// AdminShortURLCreate is the resolver for the adminShortUrlCreate field.
func (r *mutationResolver) AdminShortURLCreate(ctx context.Context, input gqlmodel.AdminShortURLCreateInput) (bool, error) {
	user, err := r.deps.Sessions.GetAuthenticatedUser(ctx)
	if err != nil {
		return false, err
	}

	var shortId string
	if input.ShortID.IsSet() {
		shortId = *input.ShortID.Value()
	}

	_, err = r.deps.ShortenedUrlsService.Create(
		ctx, shortenedurls.CreateInput{
			CreatedByUserID: &user.ID,
			ShortID:         shortId,
			URL:             input.Link,
		},
	)
	if err != nil {
		return false, fmt.Errorf("error creating shortened url: %w", err)
	}

	return true, nil
}

// AdminShortURLDelete is the resolver for the adminShortUrlDelete field.
func (r *mutationResolver) AdminShortURLDelete(ctx context.Context, id string) (bool, error) {
	if err := r.deps.ShortenedUrlsService.Delete(ctx, id); err != nil {
		return false, fmt.Errorf("error deleting shortened url: %w", err)
	}

	return true, nil
}

// AdminShortUrls is the resolver for the adminShortUrls field.
func (r *queryResolver) AdminShortUrls(ctx context.Context, input gqlmodel.AdminShortUrlsInput) (*gqlmodel.AdminShortUrlsPayload, error) {
	var (
		page    int
		perPage int
	)
	if input.Page.IsSet() {
		page = *input.Page.Value()
	}
	if input.PerPage.IsSet() {
		perPage = *input.PerPage.Value()
	}

	data, err := r.deps.ShortenedUrlsService.GetList(
		ctx, shortenedurls.GetListInput{
			Page:        page,
			PerPage:     perPage,
			OwnerUserID: nil,
		},
	)
	if err != nil {
		return nil, fmt.Errorf("error getting shortened urls: %w", err)
	}

	converted := make([]gqlmodel.AdminShortURL, 0, len(data.List))
	for _, url := range data.List {
		converted = append(
			converted,
			gqlmodel.AdminShortURL{
				ID:        url.ID,
				Link:      url.Link,
				UserID:    url.OwnerUserID,
				Views:     url.Views,
				CreatedAt: url.CreatedAt,
				UpdatedAt: url.UpdatedAt,
			},
		)
	}

	return &gqlmodel.AdminShortUrlsPayload{
		Items: converted,
		Total: data.Total,
	}, nil
}

// AdminShortUrl returns graph.AdminShortUrlResolver implementation.
func (r *Resolver) AdminShortUrl() graph.AdminShortUrlResolver { return &adminShortUrlResolver{r} }

type adminShortUrlResolver struct{ *Resolver }
