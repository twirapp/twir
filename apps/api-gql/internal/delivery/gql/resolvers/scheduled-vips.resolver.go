package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"time"

	data_loader "github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/dataloader"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/graph"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/mappers"
	"github.com/twirapp/twir/apps/api-gql/internal/services/scheduled_vips"
)

// ScheduledVipsCreate is the resolver for the scheduledVipsCreate field.
func (r *mutationResolver) ScheduledVipsCreate(ctx context.Context, input gqlmodel.ScheduledVipsCreateInput) (bool, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	var removeAt *time.Time
	if input.RemoveAt.Value() != nil {
		newRemoveAt := time.UnixMilli(int64(*input.RemoveAt.Value()))
		removeAt = &newRemoveAt
	}

	err = r.deps.ScheduledVipsService.Create(
		ctx,
		scheduled_vips.CreateInput{
			UserID:    input.UserID,
			ChannelID: dashboardID,
			RemoveAt:  removeAt,
		},
	)
	if err != nil {
		return false, err
	}

	return true, nil
}

// ScheduledVipsRemove is the resolver for the scheduledVipsRemove field.
func (r *mutationResolver) ScheduledVipsRemove(ctx context.Context, id string, input gqlmodel.ScheduledVipsRemoveInput) (bool, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	err = r.deps.ScheduledVipsService.Remove(
		ctx,
		scheduled_vips.RemoveInput{
			ID:        id,
			ChannelID: dashboardID,
			KeepVip:   input.KeepVip.Value(),
		},
	)
	if err != nil {
		return false, err
	}

	return true, nil
}

// ScheduledVipsUpdate is the resolver for the scheduledVipsUpdate field.
func (r *mutationResolver) ScheduledVipsUpdate(ctx context.Context, id string, input gqlmodel.ScheduledVipsUpdateInput) (bool, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	newRemoveAt := time.UnixMilli(int64(input.RemoveAt))

	err = r.deps.ScheduledVipsService.Update(
		ctx,
		id,
		dashboardID,
		&newRemoveAt,
	)
	if err != nil {
		return false, err
	}

	return true, nil
}

// ScheduledVips is the resolver for the scheduledVips field.
func (r *queryResolver) ScheduledVips(ctx context.Context) ([]gqlmodel.ScheduledVip, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	vips, err := r.deps.ScheduledVipsService.GetScheduledVips(ctx, dashboardID)
	if err != nil {
		return nil, err
	}

	mappedVips := make([]gqlmodel.ScheduledVip, 0, len(vips))
	for _, vip := range vips {
		mappedVips = append(mappedVips, mappers.ScheduledVipToGql(vip))
	}

	return mappedVips, nil
}

// TwitchProfile is the resolver for the twitchProfile field.
func (r *scheduledVipResolver) TwitchProfile(ctx context.Context, obj *gqlmodel.ScheduledVip) (*gqlmodel.TwirUserTwitchInfo, error) {
	return data_loader.GetHelixUserById(ctx, obj.UserID)
}

// ScheduledVip returns graph.ScheduledVipResolver implementation.
func (r *Resolver) ScheduledVip() graph.ScheduledVipResolver { return &scheduledVipResolver{r} }

type scheduledVipResolver struct{ *Resolver }
