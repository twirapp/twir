package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	donationalertsintegration "github.com/twirapp/twir/apps/api-gql/internal/services/donationalerts_integration"
)

// DonationAlertsPostCode is the resolver for the donationAlertsPostCode field.
func (r *mutationResolver) DonationAlertsPostCode(ctx context.Context, code string) (bool, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	err = r.deps.DonationAlertsIntegrationService.PostCode(ctx, dashboardID, code)
	if err != nil {
		return false, err
	}

	return true, nil
}

// DonationAlertsLogout is the resolver for the donationAlertsLogout field.
func (r *mutationResolver) DonationAlertsLogout(ctx context.Context) (bool, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	err = r.deps.DonationAlertsIntegrationService.Logout(ctx, dashboardID)
	if err != nil {
		return false, err
	}

	return true, nil
}

// DonationAlerts is the resolver for the donationAlerts field.
func (r *queryResolver) DonationAlerts(ctx context.Context) (*gqlmodel.DonationAlertsIntegration, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	entity, err := r.deps.DonationAlertsIntegrationService.GetIntegrationData(ctx, dashboardID)
	if err != nil {
		return nil, err
	}

	return donationalertsintegration.MapEntityToGQLModel(entity), nil
}

// DonationAlertsAuthLink is the resolver for the donationAlertsAuthLink field.
func (r *queryResolver) DonationAlertsAuthLink(ctx context.Context) (string, error) {
	authLink, err := r.deps.DonationAlertsIntegrationService.GetAuthLink(ctx)
	if err != nil {
		return "", err
	}

	return authLink.Link, nil
}
