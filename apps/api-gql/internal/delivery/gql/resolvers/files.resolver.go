package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"

	"github.com/99designs/gqlgen/graphql"
	"github.com/google/uuid"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/mappers"
	"github.com/twirapp/twir/apps/api-gql/internal/entity"
)

// FilesUpload is the resolver for the filesUpload field.
func (r *mutationResolver) FilesUpload(ctx context.Context, file graphql.Upload) (*gqlmodel.ChannelFile, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	newFile, err := r.deps.ChannelsFilesService.Upload(
		ctx,
		dashboardID,
		entity.Upload{
			File:        file.File,
			Filename:    file.Filename,
			Size:        file.Size,
			ContentType: file.ContentType,
		},
	)
	if err != nil {
		return nil, err
	}

	converted := mappers.MapChannelFileToGql(newFile)
	return &converted, nil
}

// FilesRemove is the resolver for the filesRemove field.
func (r *mutationResolver) FilesRemove(ctx context.Context, id uuid.UUID) (bool, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	err = r.deps.ChannelsFilesService.DeleteById(ctx, dashboardID, id)
	if err != nil {
		return false, err
	}

	return true, nil
}

// Files is the resolver for the files field.
func (r *queryResolver) Files(ctx context.Context) ([]gqlmodel.ChannelFile, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	files, err := r.deps.ChannelsFilesService.GetMany(ctx, dashboardID)
	if err != nil {
		return nil, err
	}

	converted := make([]gqlmodel.ChannelFile, len(files))
	for idx, file := range files {
		converted[idx] = mappers.MapChannelFileToGql(file)
	}

	return converted, nil
}
