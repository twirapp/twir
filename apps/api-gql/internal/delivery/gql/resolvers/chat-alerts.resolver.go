package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"encoding/json"
	"errors"

	jsonpatch "github.com/evanphx/json-patch/v5"
	"github.com/google/uuid"
	"github.com/samber/lo"
	model "github.com/satont/twir/libs/gomodels"
	"github.com/satont/twir/libs/logger/audit"
	"github.com/satont/twir/libs/utils"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/mappers"
	"gorm.io/gorm"
)

// UpdateChatAlerts is the resolver for the updateChatAlerts field.
func (r *mutationResolver) UpdateChatAlerts(ctx context.Context, input gqlmodel.ChatAlertsInput) (*gqlmodel.ChatAlerts, error) {
	dashboardId, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	user, err := r.deps.Sessions.GetAuthenticatedUser(ctx)
	if err != nil {
		return nil, err
	}

	entity := model.ChannelModulesSettings{}
	if err := r.deps.Gorm.
		WithContext(ctx).
		Where(
			`"channelId" = ? AND "userId" IS NULL AND type = 'chat_alerts'`,
			dashboardId,
		).First(&entity).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			entity = model.ChannelModulesSettings{
				ID:        uuid.NewString(),
				ChannelId: dashboardId,
				Settings:  []byte("{}"),
				Type:      "chat_alerts",
			}
		} else {
			return nil, err
		}
	}
	var entityCopy model.ChannelModulesSettings
	if err := utils.DeepCopy(&entity, &entityCopy); err != nil {
		return nil, err
	}

	inputBytes, err := json.Marshal(input)
	if err != nil {
		return nil, err
	}

	patch, err := jsonpatch.MergePatch(entity.Settings, inputBytes)
	if err != nil {
		return nil, err
	}

	entity.Settings, err = jsonpatch.MergePatch(entity.Settings, patch)
	if err != nil {
		return nil, err
	}

	if err := r.deps.Gorm.
		WithContext(ctx).
		Save(&entity).Error; err != nil {
		return nil, err
	}

	r.deps.Logger.Audit(
		"Chat alerts updated",
		audit.Fields{
			OldValue:      entityCopy,
			NewValue:      entity,
			ActorID:       lo.ToPtr(user.ID),
			ChannelID:     lo.ToPtr(dashboardId),
			System:        mappers.AuditSystemToTableName(gqlmodel.AuditLogSystemChannelsChatAlerts),
			OperationType: audit.OperationUpdate,
			ObjectID:      &entity.ID,
		},
	)

	if err := r.deps.ChatAlertsCache.Invalidate(ctx, dashboardId); err != nil {
		r.deps.Logger.Error("failed to invalidate chat alerts cache", err)
	}

	return r.Query().ChatAlerts(ctx)
}

// ChatAlerts is the resolver for the chatAlerts field.
func (r *queryResolver) ChatAlerts(ctx context.Context) (*gqlmodel.ChatAlerts, error) {
	dashboardId, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	entity := model.ChannelModulesSettings{}
	if err := r.deps.Gorm.
		WithContext(ctx).
		Where(
			`"channelId" = ? AND "userId" IS NULL AND type = 'chat_alerts'`,
			dashboardId,
		).First(&entity).Error; err != nil {
		if errors.Is(err, gorm.ErrRecordNotFound) {
			return &gqlmodel.ChatAlerts{}, nil
		}
		return nil, err
	}

	parsedSettings := gqlmodel.ChatAlerts{}
	if err := json.Unmarshal(entity.Settings, &parsedSettings); err != nil {
		return nil, err
	}

	return &parsedSettings, nil
}
