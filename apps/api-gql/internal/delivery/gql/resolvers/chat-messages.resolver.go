package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"

	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/mappers"
	"github.com/twirapp/twir/apps/api-gql/internal/services/chat_messages"
)

// ChatMessages is the resolver for the chatMessages field.
func (r *queryResolver) ChatMessages(ctx context.Context, input gqlmodel.ChatMessageInput) ([]gqlmodel.ChatMessage, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get selected dashboard: %w", err)
	}

	messagesInput := chat_messages.GetManyInput{
		Page:         0,
		PerPage:      20,
		ChannelID:    &dashboardID,
		UserNameLike: input.UserNameLike.Value(),
		TextLike:     input.TextLike.Value(),
	}

	if input.Page.IsSet() {
		messagesInput.Page = *input.Page.Value()
	}

	if input.PerPage.IsSet() {
		messagesInput.PerPage = *input.PerPage.Value()
	}

	messages, err := r.deps.ChatMessagesService.GetMany(
		ctx,
		messagesInput,
	)

	gqlModels := make([]gqlmodel.ChatMessage, 0, len(messages))
	for _, m := range messages {
		gqlModels = append(gqlModels, mappers.ChatMessageToGQL(m))
	}

	return gqlModels, nil
}

// ChatMessages is the resolver for the chatMessages field.
func (r *subscriptionResolver) ChatMessages(ctx context.Context) (<-chan *gqlmodel.ChatMessage, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, fmt.Errorf("failed to get selected dashboard: %w", err)
	}

	ch := r.deps.ChatMessagesService.SubscribeToNewMessagesByChannelID(ctx, dashboardID)
	gqlCh := make(chan *gqlmodel.ChatMessage, 1)

	go func() {
		for msg := range ch {
			converted := mappers.ChatMessageToGQL(msg)
			gqlCh <- &converted
		}
		close(gqlCh)
	}()

	return gqlCh, nil
}

// AdminChatMessages is the resolver for the adminChatMessages field.
func (r *subscriptionResolver) AdminChatMessages(ctx context.Context) (<-chan *gqlmodel.ChatMessage, error) {
	ch := r.deps.ChatMessagesService.SubscribeToNewMessages(ctx)
	gqlCh := make(chan *gqlmodel.ChatMessage, 1)

	go func() {
		for msg := range ch {
			converted := mappers.ChatMessageToGQL(msg)
			gqlCh <- &converted
		}
		close(gqlCh)
	}()

	return gqlCh, nil
}
