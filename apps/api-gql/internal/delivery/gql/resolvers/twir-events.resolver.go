package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"

	"github.com/goccy/go-json"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/mappers"
	twir_events "github.com/twirapp/twir/apps/api-gql/internal/services/twir-events"
)

// TwirEvents is the resolver for the twirEvents field.
func (r *subscriptionResolver) TwirEvents(ctx context.Context) (<-chan gqlmodel.EventMessage, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	chann := make(chan gqlmodel.EventMessage, 1)

	wsSubscription, err := r.deps.WsRouter.Subscribe([]string{twir_events.CreateSubscribeKey(dashboardID)})
	if err != nil {
		return nil, err
	}

	go func() {
		defer func() {
			wsSubscription.Unsubscribe()
			close(chann)
		}()

		for {
			select {
			case <-ctx.Done():
				return
			case data := <-wsSubscription.GetChannel():
				var msg twir_events.Message
				if err := json.Unmarshal(data, &msg); err != nil {
					panic(err)
				}

				mappedEvent, err := mappers.MapEventToGqlType(msg.EventName, msg.Data)
				if err != nil {
					panic(err)
				}

				chann <- mappedEvent
			}
		}
	}()

	return chann, nil
}
