package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"
	"log/slog"

	"github.com/goccy/go-json"
	model "github.com/twirapp/twir/libs/gomodels"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/mappers"
	twir_events "github.com/twirapp/twir/apps/api-gql/internal/services/twir-events"
)

// TwirEvents is the resolver for the twirEvents field.
func (r *subscriptionResolver) TwirEvents(ctx context.Context, apiKey string) (<-chan gqlmodel.EventMessage, error) {
	user := model.Users{}
	if err := r.deps.Gorm.Where(`"apiKey" = ?`, apiKey).First(&user).Error; err != nil {
		return nil, fmt.Errorf("failed to get user: %w", err)
	}

	chann := make(chan gqlmodel.EventMessage, 1)

	wsSubscription, err := r.deps.WsRouter.Subscribe([]string{twir_events.CreateSubscribeKey(user.ID)})
	if err != nil {
		return nil, err
	}

	go func() {
		defer func() {
			wsSubscription.Unsubscribe()
			close(chann)
		}()

		for {
			select {
			case <-ctx.Done():
				return
			case data := <-wsSubscription.GetChannel():
				var msg twir_events.Message
				if err := json.Unmarshal(data, &msg); err != nil {
					r.deps.Logger.Error(
						"failed to unmarshal twir event message",
						slog.Any("err", err),
						slog.String("data", string(data)),
					)
					continue
				}

				mappedEvent, err := mappers.MapEventToGqlType(msg.EventName, msg.Data)
				if err != nil {
					r.deps.Logger.Error(
						"failed to map event to gql type",
						slog.Any("err", err),
						slog.String("eventName", msg.EventName),
					)
					continue
				}

				chann <- mappedEvent
			}
		}
	}()

	return chann, nil
}
