package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"

	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/mappers"
)

// StreamelementsGetAuthorizationURL is the resolver for the streamelementsGetAuthorizationUrl field.
func (r *queryResolver) StreamelementsGetAuthorizationURL(ctx context.Context) (string, error) {
	link, err := r.deps.StreamElementsService.GetAuthLink()
	if err != nil {
		return "", err
	}

	return link, nil
}

// StreamelementsExchangeDataByCode is the resolver for the streamelementsExchangeDataByCode field.
func (r *queryResolver) StreamelementsExchangeDataByCode(ctx context.Context, code string) (*gqlmodel.StreamElementsImportDataOutput, error) {
	data, err := r.deps.StreamElementsService.ExchangeDataByCode(ctx, code)
	if err != nil {
		return nil, err
	}

	convertedCommands := make([]gqlmodel.StreamElementsCommand, 0, len(data.Commands))
	convertedTimers := make([]gqlmodel.StreamElementsTimer, 0, len(data.Timers))

	for _, cmd := range data.Commands {
		convertedCommands = append(convertedCommands, mappers.StreamElementsCommandToGql(cmd))
	}

	for _, timer := range data.Timers {
		convertedTimers = append(convertedTimers, mappers.StreamElementsTimerToGql(timer))
	}

	return &gqlmodel.StreamElementsImportDataOutput{
		Commands: convertedCommands,
		Timers:   convertedTimers,
	}, nil
}
