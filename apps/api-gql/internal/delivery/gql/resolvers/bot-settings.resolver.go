package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/entity"
	"github.com/twirapp/twir/apps/api-gql/internal/services/channels_commands_prefix"
)

// CommandsPrefixUpdate is the resolver for the commandsPrefixUpdate field.
func (r *mutationResolver) CommandsPrefixUpdate(ctx context.Context, input gqlmodel.CommandsPrefixUpdateInput) (bool, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	_, err = r.deps.ChannelsCommandsPrefix.Update(
		ctx,
		channels_commands_prefix.UpdateInput{
			ChannelID: dashboardID,
			Prefix:    input.NewPrefix,
		},
	)
	if err != nil {
		return false, fmt.Errorf("cannot update prefix: %w", err)
	}

	return true, nil
}

// CommandsPrefixReset is the resolver for the commandsPrefixReset field.
func (r *mutationResolver) CommandsPrefixReset(ctx context.Context) (bool, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	if err = r.deps.ChannelsCommandsPrefix.Delete(ctx, dashboardID); err != nil {
		return false, fmt.Errorf("cannot reset prefix: %w", err)
	}

	return true, nil
}

// ChannelsCommandsPrefix is the resolver for the channelsCommandsPrefix field.
func (r *queryResolver) ChannelsCommandsPrefix(ctx context.Context) (string, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return "", err
	}

	prefix, err := r.deps.ChannelsCommandsPrefix.GetByChannelID(ctx, dashboardID)
	if err != nil {
		return "", fmt.Errorf("cannot get prefix: %w", err)
	}

	if prefix == entity.ChannelsCommandsPrefixNil {
		return channels_commands_prefix.DefaultPrefix, nil
	}

	return prefix.Prefix, nil
}
