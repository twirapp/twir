package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"slices"

	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/services/channels_redemptions_history"
)

// TwitchRewards is the resolver for the twitchRewards field.
func (r *queryResolver) TwitchRewards(ctx context.Context, channelID *string) ([]gqlmodel.TwitchReward, error) {
	dashboardId, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	channelIdForRequest := dashboardId
	if channelID != nil {
		channelIdForRequest = *channelID
	}

	rewards, err := r.deps.CachedTwitchClient.GetChannelRewards(ctx, channelIdForRequest)
	if err != nil {
		return nil, err
	}

	var gqlRewards []gqlmodel.TwitchReward
	for _, reward := range rewards {
		imageUrls := append(
			[]string{},
			reward.Image.Url1x,
			reward.Image.Url2x,
			reward.Image.Url4x,
		)

		usedTimes, err := r.deps.ChannelsRedemptionsHistoryService.Count(
			ctx, channels_redemptions_history.CountInput{
				ChannelID:  &channelIdForRequest,
				RewardsIDs: []string{reward.ID},
			},
		)
		if err != nil {
			return nil, err
		}

		gqlRewards = append(
			gqlRewards,
			gqlmodel.TwitchReward{
				ID:                reward.ID,
				Title:             reward.Title,
				Cost:              reward.Cost,
				ImageUrls:         imageUrls,
				BackgroundColor:   reward.BackgroundColor,
				Enabled:           reward.IsEnabled,
				UsedTimes:         int(usedTimes),
				UserInputRequired: reward.IsUserInputRequired,
			},
		)
	}

	slices.SortFunc(
		gqlRewards,
		func(a, b gqlmodel.TwitchReward) int {
			return b.Cost - a.Cost
		},
	)

	return gqlRewards, nil
}
