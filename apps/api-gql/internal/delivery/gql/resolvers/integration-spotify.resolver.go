package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/mappers"
)

// SpotifyPostCode is the resolver for the spotifyPostCode field.
func (r *mutationResolver) SpotifyPostCode(ctx context.Context, input gqlmodel.SpotifyPostCodeInput) (bool, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	err = r.deps.SpotifyIntegrationService.PostCode(ctx, dashboardID, input.Code)
	if err != nil {
		return false, fmt.Errorf("cannot post spotify code: %w", err)
	}

	return true, nil
}

// SpotifyLogout is the resolver for the spotifyLogout field.
func (r *mutationResolver) SpotifyLogout(ctx context.Context) (bool, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	err = r.deps.SpotifyIntegrationService.Logout(ctx, dashboardID)
	if err != nil {
		return false, fmt.Errorf("cannot logout from spotify: %w", err)
	}

	return true, nil
}

// SpotifyData is the resolver for the spotifyData field.
func (r *queryResolver) SpotifyData(ctx context.Context) (*gqlmodel.SpotifyIntegration, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	data, err := r.deps.SpotifyIntegrationService.GetSpotifyData(ctx, dashboardID)
	if err != nil {
		return nil, fmt.Errorf("cannot get spotify data: %w", err)
	}

	return mappers.MapSpotifyIntegrationDataToGql(data), nil
}

// SpotifyAuthLink is the resolver for the spotifyAuthLink field.
func (r *queryResolver) SpotifyAuthLink(ctx context.Context) (string, error) {
	// Implementation similar to your existing IntegrationsSpotifyGetAuthLink
	return r.deps.SpotifyIntegrationService.GetAuthLink(ctx)
}
