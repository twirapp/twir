package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"

	"github.com/google/uuid"
	"github.com/samber/lo"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/mappers"
	"github.com/twirapp/twir/apps/api-gql/internal/entity"
	"github.com/twirapp/twir/apps/api-gql/internal/services/variables"
)

// VariablesCreate is the resolver for the variablesCreate field
func (r *mutationResolver) VariablesCreate(ctx context.Context, opts gqlmodel.VariableCreateInput) (*gqlmodel.Variable, error) {
	dashboardId, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	user, err := r.deps.Sessions.GetAuthenticatedUser(ctx)
	if err != nil {
		return nil, err
	}

	variable, err := r.deps.VariablesService.Create(
		ctx,
		variables.CreateInput{
			ChannelID:      dashboardId,
			ActorID:        user.ID,
			Name:           opts.Name,
			Description:    opts.Description.Value(),
			Type:           entity.CustomVarType(opts.Type),
			EvalValue:      opts.EvalValue,
			Response:       opts.Response,
			ScriptLanguage: mappers.VariableScriptLanguageToEntity(opts.ScriptLanguage).String(),
		},
	)
	if err != nil {
		return nil, err
	}

	converted := mappers.VariableModelToGql(variable)
	return &converted, nil
}

// VariablesUpdate is the resolver for the variablesUpdate field.
func (r *mutationResolver) VariablesUpdate(ctx context.Context, id uuid.UUID, opts gqlmodel.VariableUpdateInput) (*gqlmodel.Variable, error) {
	dashboardId, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	user, err := r.deps.Sessions.GetAuthenticatedUser(ctx)
	if err != nil {
		return nil, err
	}

	var scriptLanguage *entity.CustomVarScriptLanguage
	if opts.ScriptLanguage.IsSet() {
		lang := opts.ScriptLanguage.Value()
		scriptLanguage = lo.ToPtr(mappers.VariableScriptLanguageToEntity(*lang))
	}

	input := variables.UpdateInput{
		ID:             id,
		ChannelID:      dashboardId,
		ActorID:        user.ID,
		Name:           opts.Name.Value(),
		Description:    opts.Description.Value(),
		EvalValue:      opts.EvalValue.Value(),
		Response:       opts.Response.Value(),
		ScriptLanguage: scriptLanguage,
	}
	if opts.Type.Value() != nil {
		input.Type = lo.ToPtr(entity.CustomVarType(*opts.Type.Value()))
	}

	updatedVariable, err := r.deps.VariablesService.Update(ctx, input)
	if err != nil {
		return nil, err
	}

	converted := mappers.VariableModelToGql(updatedVariable)
	return &converted, nil
}

// VariablesDelete is the resolver for the variablesDelete field.
func (r *mutationResolver) VariablesDelete(ctx context.Context, id uuid.UUID) (bool, error) {
	dashboardId, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return false, err
	}

	user, err := r.deps.Sessions.GetAuthenticatedUser(ctx)
	if err != nil {
		return false, err
	}

	if err := r.deps.VariablesService.Delete(ctx, id, dashboardId, user.ID); err != nil {
		return false, err
	}

	return true, nil
}

// ExecuteScript is the resolver for the executeScript field.
func (r *mutationResolver) ExecuteScript(ctx context.Context, script string, language gqlmodel.VariableScriptLanguage, testAsUserName *string) (string, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return "", err
	}

	return r.deps.VariablesService.EvaluateScript(
		ctx,
		dashboardID,
		script,
		mappers.VariableScriptLanguageToEntity(language),
		testAsUserName,
	)
}

// Variables is the resolver for the variables field.
func (r *queryResolver) Variables(ctx context.Context) ([]gqlmodel.Variable, error) {
	dashboardId, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	vars, err := r.deps.VariablesService.GetAll(ctx, dashboardId)
	if err != nil {
		return nil, err
	}

	result := make([]gqlmodel.Variable, 0, len(vars))
	for _, variable := range vars {
		result = append(result, mappers.VariableModelToGql(variable))
	}

	return result, nil
}

// VariablesBuiltIn is the resolver for the variablesBuiltIn field.
func (r *queryResolver) VariablesBuiltIn(ctx context.Context) ([]gqlmodel.BuiltInVariable, error) {
	vars, err := r.deps.TwirBus.Parser.GetBuiltInVariables.Request(ctx, struct{}{})
	if err != nil {
		return nil, fmt.Errorf("cannot get built-in variables: %w", err)
	}

	result := make([]gqlmodel.BuiltInVariable, 0, len(vars.Data))
	for _, v := range vars.Data {
		links := make([]gqlmodel.BuiltInVariableLink, 0, len(v.Links))
		for _, l := range v.Links {
			links = append(
				links, gqlmodel.BuiltInVariableLink{
					Name: l.Name,
					Href: l.Href,
				},
			)
		}

		result = append(
			result,
			gqlmodel.BuiltInVariable{
				Name:                v.Name,
				Description:         v.Description,
				Example:             v.Example,
				Visible:             v.Visible,
				CanBeUsedInRegistry: v.CanBeUsedInRegistry,
				Links:               links,
			},
		)
	}

	return result, nil
}
