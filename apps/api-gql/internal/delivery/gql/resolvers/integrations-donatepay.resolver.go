package resolvers

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.76

import (
	"context"
	"fmt"

	"github.com/twirapp/twir/apps/api-gql/internal/delivery/gql/gqlmodel"
)

// DonatePayIntegration is the resolver for the donatePayIntegration field.
func (r *mutationResolver) DonatePayIntegration(ctx context.Context, apiKey string, enabled bool) (*gqlmodel.DonatePayIntegration, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	err = r.deps.DonatePayService.CreateOrUpdate(ctx, dashboardID, apiKey, enabled)
	if err != nil {
		return nil, fmt.Errorf("failed to update DonatePay integration: %w", err)
	}

	data, err := r.deps.DonatePayService.GetByChannelID(ctx, dashboardID)
	if err != nil {
		return nil, fmt.Errorf("cannot get donatepay integration: %w", err)
	}

	return &gqlmodel.DonatePayIntegration{
		APIKey:  data.ApiKey,
		Enabled: data.Enabled,
	}, nil
}

// DonatePayIntegration is the resolver for the donatePayIntegration field.
func (r *queryResolver) DonatePayIntegration(ctx context.Context) (*gqlmodel.DonatePayIntegration, error) {
	dashboardID, err := r.deps.Sessions.GetSelectedDashboard(ctx)
	if err != nil {
		return nil, err
	}

	data, err := r.deps.DonatePayService.GetByChannelID(ctx, dashboardID)
	if err != nil {
		return nil, fmt.Errorf("failed to get DonatePay integration: %w", err)
	}

	return &gqlmodel.DonatePayIntegration{
		APIKey:  data.ApiKey,
		Enabled: data.Enabled,
	}, nil
}
