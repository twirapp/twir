// Code generated by protoc-gen-twirp v8.1.3, DO NOT EDIT.
// source: api.proto

package api

import context "context"
import fmt "fmt"
import http "net/http"
import io "io"
import json "encoding/json"
import strconv "strconv"
import strings "strings"

import protojson "google.golang.org/protobuf/encoding/protojson"
import proto "google.golang.org/protobuf/proto"
import twirp "github.com/twitchtv/twirp"
import ctxsetters "github.com/twitchtv/twirp/ctxsetters"

import google_protobuf "google.golang.org/protobuf/types/known/emptypb"
import messages_integrations_discord "github.com/twirapp/twir/libs/api/messages/integrations_discord"
import messages_integrations_faceit "github.com/twirapp/twir/libs/api/messages/integrations_faceit"
import messages_integrations_lastfm "github.com/twirapp/twir/libs/api/messages/integrations_lastfm"
import messages_integrations_nightbot "github.com/twirapp/twir/libs/api/messages/integrations_nightbot"
import messages_integrations_streamlabs "github.com/twirapp/twir/libs/api/messages/integrations_streamlabs"
import messages_integrations_valorant "github.com/twirapp/twir/libs/api/messages/integrations_valorant"
import messages_integrations_vk "github.com/twirapp/twir/libs/api/messages/integrations_vk"
import messages_modules_obs_websocket "github.com/twirapp/twir/libs/api/messages/modules_obs_websocket"
import messages_modules_tts "github.com/twirapp/twir/libs/api/messages/modules_tts"
import messages_overlays "github.com/twirapp/twir/libs/api/messages/overlays"
import messages_overlays_be_right_back "github.com/twirapp/twir/libs/api/messages/overlays_be_right_back"
import messages_twitch "github.com/twirapp/twir/libs/api/messages/twitch"
import messages_twitch_protected "github.com/twirapp/twir/libs/api/messages/twitch_protected"

import bytes "bytes"
import errors "errors"
import path "path"
import url "net/url"

// Version compatibility assertion.
// If the constant is not defined in the package, that likely means
// the package needs to be updated to work with this generated code.
// See https://twitchtv.github.io/twirp/docs/version_matrix.html
const _ = twirp.TwirpPackageMinVersion_8_1_0

// ===================
// Protected Interface
// ===================

type Protected interface {
	IntegrationsFaceitGetAuthLink(context.Context, *google_protobuf.Empty) (*messages_integrations_faceit.GetAuthLink, error)

	IntegrationsFaceitGetData(context.Context, *google_protobuf.Empty) (*messages_integrations_faceit.GetDataResponse, error)

	IntegrationsFaceitUpdate(context.Context, *messages_integrations_faceit.UpdateDataRequest) (*google_protobuf.Empty, error)

	IntegrationsFaceitPostCode(context.Context, *messages_integrations_faceit.PostCodeRequest) (*google_protobuf.Empty, error)

	IntegrationsFaceitLogout(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)

	IntegrationsLastFMGetAuthLink(context.Context, *google_protobuf.Empty) (*messages_integrations_lastfm.GetAuthLink, error)

	IntegrationsLastFMGetData(context.Context, *google_protobuf.Empty) (*messages_integrations_lastfm.GetDataResponse, error)

	IntegrationsLastFMPostCode(context.Context, *messages_integrations_lastfm.PostCodeRequest) (*google_protobuf.Empty, error)

	IntegrationsLastFMLogout(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)

	IntegrationsStreamlabsGetAuthLink(context.Context, *google_protobuf.Empty) (*messages_integrations_streamlabs.GetAuthLink, error)

	IntegrationsStreamlabsGetData(context.Context, *google_protobuf.Empty) (*messages_integrations_streamlabs.GetDataResponse, error)

	IntegrationsStreamlabsPostCode(context.Context, *messages_integrations_streamlabs.PostCodeRequest) (*google_protobuf.Empty, error)

	IntegrationsStreamlabsLogout(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)

	IntegrationsNightbotGetAuthLink(context.Context, *google_protobuf.Empty) (*messages_integrations_nightbot.GetAuthLink, error)

	IntegrationsNightbotGetData(context.Context, *google_protobuf.Empty) (*messages_integrations_nightbot.GetDataResponse, error)

	IntegrationsNightbotPostCode(context.Context, *messages_integrations_nightbot.PostCodeRequest) (*google_protobuf.Empty, error)

	IntegrationsNightbotLogout(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)

	IntegrationsNightbotImportCommands(context.Context, *google_protobuf.Empty) (*messages_integrations_nightbot.ImportCommandsResponse, error)

	IntegrationsNightbotImportTimers(context.Context, *google_protobuf.Empty) (*messages_integrations_nightbot.ImportTimersResponse, error)

	IntegrationsVKGetAuthLink(context.Context, *google_protobuf.Empty) (*messages_integrations_vk.GetAuthLink, error)

	IntegrationsVKGetData(context.Context, *google_protobuf.Empty) (*messages_integrations_vk.GetDataResponse, error)

	IntegrationsVKPostCode(context.Context, *messages_integrations_vk.PostCodeRequest) (*google_protobuf.Empty, error)

	IntegrationsVKLogout(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)

	IntegrationsDiscordGetAuthLink(context.Context, *google_protobuf.Empty) (*messages_integrations_discord.GetAuthLink, error)

	IntegrationsDiscordGetData(context.Context, *google_protobuf.Empty) (*messages_integrations_discord.GetDataResponse, error)

	IntegrationsDiscordUpdate(context.Context, *messages_integrations_discord.UpdateMessage) (*google_protobuf.Empty, error)

	IntegrationDiscordConnectGuild(context.Context, *messages_integrations_discord.PostCodeRequest) (*google_protobuf.Empty, error)

	IntegrationsDiscordDisconnectGuild(context.Context, *messages_integrations_discord.DisconnectGuildMessage) (*google_protobuf.Empty, error)

	IntegrationsDiscordGetGuildChannels(context.Context, *messages_integrations_discord.GetGuildChannelsRequest) (*messages_integrations_discord.GetGuildChannelsResponse, error)

	IntegrationsDiscordGetGuildInfo(context.Context, *messages_integrations_discord.GetGuildInfoRequest) (*messages_integrations_discord.GetGuildInfoResponse, error)

	ModulesOBSWebsocketGet(context.Context, *google_protobuf.Empty) (*messages_modules_obs_websocket.GetResponse, error)

	ModulesOBSWebsocketUpdate(context.Context, *messages_modules_obs_websocket.PostRequest) (*google_protobuf.Empty, error)

	ModulesTTSGet(context.Context, *google_protobuf.Empty) (*messages_modules_tts.GetResponse, error)

	ModulesTTSUpdate(context.Context, *messages_modules_tts.PostRequest) (*google_protobuf.Empty, error)

	ModulesTTSGetInfo(context.Context, *google_protobuf.Empty) (*messages_modules_tts.GetInfoResponse, error)

	ModulesTTSGetUsersSettings(context.Context, *google_protobuf.Empty) (*messages_modules_tts.GetUsersSettingsResponse, error)

	ModulesTTSUsersDelete(context.Context, *messages_modules_tts.UsersDeleteRequest) (*google_protobuf.Empty, error)

	OverlayBeRightBackGet(context.Context, *google_protobuf.Empty) (*messages_overlays_be_right_back.Settings, error)

	OverlayBeRightBackUpdate(context.Context, *messages_overlays_be_right_back.Settings) (*messages_overlays_be_right_back.Settings, error)

	TwitchSearchCategories(context.Context, *messages_twitch_protected.SearchCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error)

	TwitchGetCategories(context.Context, *messages_twitch_protected.GetCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error)

	TwitchSetChannelInformation(context.Context, *messages_twitch_protected.SetChannelInformationRequest) (*google_protobuf.Empty, error)

	OverlaysGetAll(context.Context, *google_protobuf.Empty) (*messages_overlays.GetAllResponse, error)

	OverlaysGetOne(context.Context, *messages_overlays.GetByIdRequest) (*messages_overlays.Overlay, error)

	OverlaysUpdate(context.Context, *messages_overlays.UpdateRequest) (*messages_overlays.Overlay, error)

	OverlaysDelete(context.Context, *messages_overlays.DeleteRequest) (*google_protobuf.Empty, error)

	OverlaysCreate(context.Context, *messages_overlays.CreateRequest) (*messages_overlays.Overlay, error)

	OverlaysParseHtml(context.Context, *messages_overlays.ParseHtmlOverlayRequest) (*messages_overlays.ParseHtmlOverlayResponse, error)

	IntegrationsValorantGetAuthLink(context.Context, *google_protobuf.Empty) (*messages_integrations_valorant.GetAuthLink, error)

	IntegrationsValorantGetData(context.Context, *google_protobuf.Empty) (*messages_integrations_valorant.GetDataResponse, error)

	IntegrationsValorantPostCode(context.Context, *messages_integrations_valorant.PostCodeRequest) (*google_protobuf.Empty, error)

	IntegrationsValorantLogout(context.Context, *google_protobuf.Empty) (*google_protobuf.Empty, error)
}

// =========================
// Protected Protobuf Client
// =========================

type protectedProtobufClient struct {
	client      HTTPClient
	urls        [52]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewProtectedProtobufClient creates a Protobuf client that implements the Protected interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewProtectedProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Protected {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "api", "Protected")
	urls := [52]string{
		serviceURL + "IntegrationsFaceitGetAuthLink",
		serviceURL + "IntegrationsFaceitGetData",
		serviceURL + "IntegrationsFaceitUpdate",
		serviceURL + "IntegrationsFaceitPostCode",
		serviceURL + "IntegrationsFaceitLogout",
		serviceURL + "IntegrationsLastFMGetAuthLink",
		serviceURL + "IntegrationsLastFMGetData",
		serviceURL + "IntegrationsLastFMPostCode",
		serviceURL + "IntegrationsLastFMLogout",
		serviceURL + "IntegrationsStreamlabsGetAuthLink",
		serviceURL + "IntegrationsStreamlabsGetData",
		serviceURL + "IntegrationsStreamlabsPostCode",
		serviceURL + "IntegrationsStreamlabsLogout",
		serviceURL + "IntegrationsNightbotGetAuthLink",
		serviceURL + "IntegrationsNightbotGetData",
		serviceURL + "IntegrationsNightbotPostCode",
		serviceURL + "IntegrationsNightbotLogout",
		serviceURL + "IntegrationsNightbotImportCommands",
		serviceURL + "IntegrationsNightbotImportTimers",
		serviceURL + "IntegrationsVKGetAuthLink",
		serviceURL + "IntegrationsVKGetData",
		serviceURL + "IntegrationsVKPostCode",
		serviceURL + "IntegrationsVKLogout",
		serviceURL + "IntegrationsDiscordGetAuthLink",
		serviceURL + "IntegrationsDiscordGetData",
		serviceURL + "IntegrationsDiscordUpdate",
		serviceURL + "IntegrationDiscordConnectGuild",
		serviceURL + "IntegrationsDiscordDisconnectGuild",
		serviceURL + "IntegrationsDiscordGetGuildChannels",
		serviceURL + "IntegrationsDiscordGetGuildInfo",
		serviceURL + "ModulesOBSWebsocketGet",
		serviceURL + "ModulesOBSWebsocketUpdate",
		serviceURL + "ModulesTTSGet",
		serviceURL + "ModulesTTSUpdate",
		serviceURL + "ModulesTTSGetInfo",
		serviceURL + "ModulesTTSGetUsersSettings",
		serviceURL + "ModulesTTSUsersDelete",
		serviceURL + "OverlayBeRightBackGet",
		serviceURL + "OverlayBeRightBackUpdate",
		serviceURL + "TwitchSearchCategories",
		serviceURL + "TwitchGetCategories",
		serviceURL + "TwitchSetChannelInformation",
		serviceURL + "OverlaysGetAll",
		serviceURL + "OverlaysGetOne",
		serviceURL + "OverlaysUpdate",
		serviceURL + "OverlaysDelete",
		serviceURL + "OverlaysCreate",
		serviceURL + "OverlaysParseHtml",
		serviceURL + "IntegrationsValorantGetAuthLink",
		serviceURL + "IntegrationsValorantGetData",
		serviceURL + "IntegrationsValorantPostCode",
		serviceURL + "IntegrationsValorantLogout",
	}

	return &protectedProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *protectedProtobufClient) IntegrationsFaceitGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_faceit.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitGetAuthLink")
	caller := c.callIntegrationsFaceitGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_faceit.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsFaceitGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_faceit.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_faceit.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsFaceitGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_faceit.GetAuthLink, error) {
	out := new(messages_integrations_faceit.GetAuthLink)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsFaceitGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_faceit.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitGetData")
	caller := c.callIntegrationsFaceitGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_faceit.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsFaceitGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_faceit.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_faceit.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsFaceitGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_faceit.GetDataResponse, error) {
	out := new(messages_integrations_faceit.GetDataResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsFaceitUpdate(ctx context.Context, in *messages_integrations_faceit.UpdateDataRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitUpdate")
	caller := c.callIntegrationsFaceitUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_faceit.UpdateDataRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_faceit.UpdateDataRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_faceit.UpdateDataRequest) when calling interceptor")
					}
					return c.callIntegrationsFaceitUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsFaceitUpdate(ctx context.Context, in *messages_integrations_faceit.UpdateDataRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsFaceitPostCode(ctx context.Context, in *messages_integrations_faceit.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitPostCode")
	caller := c.callIntegrationsFaceitPostCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_faceit.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_faceit.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_faceit.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationsFaceitPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsFaceitPostCode(ctx context.Context, in *messages_integrations_faceit.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsFaceitLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitLogout")
	caller := c.callIntegrationsFaceitLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsFaceitLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsFaceitLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsLastFMGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_lastfm.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMGetAuthLink")
	caller := c.callIntegrationsLastFMGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_lastfm.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsLastFMGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_lastfm.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_lastfm.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsLastFMGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_lastfm.GetAuthLink, error) {
	out := new(messages_integrations_lastfm.GetAuthLink)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsLastFMGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_lastfm.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMGetData")
	caller := c.callIntegrationsLastFMGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_lastfm.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsLastFMGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_lastfm.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_lastfm.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsLastFMGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_lastfm.GetDataResponse, error) {
	out := new(messages_integrations_lastfm.GetDataResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsLastFMPostCode(ctx context.Context, in *messages_integrations_lastfm.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMPostCode")
	caller := c.callIntegrationsLastFMPostCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_lastfm.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_lastfm.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_lastfm.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationsLastFMPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsLastFMPostCode(ctx context.Context, in *messages_integrations_lastfm.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsLastFMLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMLogout")
	caller := c.callIntegrationsLastFMLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsLastFMLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsLastFMLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsStreamlabsGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_streamlabs.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsGetAuthLink")
	caller := c.callIntegrationsStreamlabsGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_streamlabs.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsStreamlabsGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_streamlabs.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_streamlabs.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsStreamlabsGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_streamlabs.GetAuthLink, error) {
	out := new(messages_integrations_streamlabs.GetAuthLink)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsStreamlabsGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_streamlabs.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsGetData")
	caller := c.callIntegrationsStreamlabsGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_streamlabs.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsStreamlabsGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_streamlabs.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_streamlabs.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsStreamlabsGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_streamlabs.GetDataResponse, error) {
	out := new(messages_integrations_streamlabs.GetDataResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsStreamlabsPostCode(ctx context.Context, in *messages_integrations_streamlabs.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsPostCode")
	caller := c.callIntegrationsStreamlabsPostCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_streamlabs.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_streamlabs.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_streamlabs.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationsStreamlabsPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsStreamlabsPostCode(ctx context.Context, in *messages_integrations_streamlabs.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsStreamlabsLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsLogout")
	caller := c.callIntegrationsStreamlabsLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsStreamlabsLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsStreamlabsLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsNightbotGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotGetAuthLink")
	caller := c.callIntegrationsNightbotGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsNightbotGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsNightbotGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.GetAuthLink, error) {
	out := new(messages_integrations_nightbot.GetAuthLink)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsNightbotGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotGetData")
	caller := c.callIntegrationsNightbotGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsNightbotGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsNightbotGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.GetDataResponse, error) {
	out := new(messages_integrations_nightbot.GetDataResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[14], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsNightbotPostCode(ctx context.Context, in *messages_integrations_nightbot.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotPostCode")
	caller := c.callIntegrationsNightbotPostCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_nightbot.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_nightbot.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_nightbot.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationsNightbotPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsNightbotPostCode(ctx context.Context, in *messages_integrations_nightbot.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[15], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsNightbotLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotLogout")
	caller := c.callIntegrationsNightbotLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsNightbotLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsNightbotLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[16], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsNightbotImportCommands(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.ImportCommandsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotImportCommands")
	caller := c.callIntegrationsNightbotImportCommands
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.ImportCommandsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsNightbotImportCommands(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.ImportCommandsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.ImportCommandsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsNightbotImportCommands(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.ImportCommandsResponse, error) {
	out := new(messages_integrations_nightbot.ImportCommandsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[17], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsNightbotImportTimers(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.ImportTimersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotImportTimers")
	caller := c.callIntegrationsNightbotImportTimers
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.ImportTimersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsNightbotImportTimers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.ImportTimersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.ImportTimersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsNightbotImportTimers(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.ImportTimersResponse, error) {
	out := new(messages_integrations_nightbot.ImportTimersResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[18], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsVKGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_vk.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKGetAuthLink")
	caller := c.callIntegrationsVKGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_vk.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsVKGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_vk.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_vk.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsVKGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_vk.GetAuthLink, error) {
	out := new(messages_integrations_vk.GetAuthLink)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[19], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsVKGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_vk.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKGetData")
	caller := c.callIntegrationsVKGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_vk.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsVKGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_vk.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_vk.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsVKGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_vk.GetDataResponse, error) {
	out := new(messages_integrations_vk.GetDataResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[20], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsVKPostCode(ctx context.Context, in *messages_integrations_vk.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKPostCode")
	caller := c.callIntegrationsVKPostCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_vk.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_vk.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_vk.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationsVKPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsVKPostCode(ctx context.Context, in *messages_integrations_vk.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[21], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsVKLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKLogout")
	caller := c.callIntegrationsVKLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsVKLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsVKLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[22], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsDiscordGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_discord.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetAuthLink")
	caller := c.callIntegrationsDiscordGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_discord.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsDiscordGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsDiscordGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_discord.GetAuthLink, error) {
	out := new(messages_integrations_discord.GetAuthLink)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[23], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsDiscordGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_discord.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetData")
	caller := c.callIntegrationsDiscordGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_discord.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsDiscordGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsDiscordGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_discord.GetDataResponse, error) {
	out := new(messages_integrations_discord.GetDataResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[24], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsDiscordUpdate(ctx context.Context, in *messages_integrations_discord.UpdateMessage) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordUpdate")
	caller := c.callIntegrationsDiscordUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_discord.UpdateMessage) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.UpdateMessage)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.UpdateMessage) when calling interceptor")
					}
					return c.callIntegrationsDiscordUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsDiscordUpdate(ctx context.Context, in *messages_integrations_discord.UpdateMessage) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[25], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationDiscordConnectGuild(ctx context.Context, in *messages_integrations_discord.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationDiscordConnectGuild")
	caller := c.callIntegrationDiscordConnectGuild
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_discord.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationDiscordConnectGuild(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationDiscordConnectGuild(ctx context.Context, in *messages_integrations_discord.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[26], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsDiscordDisconnectGuild(ctx context.Context, in *messages_integrations_discord.DisconnectGuildMessage) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordDisconnectGuild")
	caller := c.callIntegrationsDiscordDisconnectGuild
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_discord.DisconnectGuildMessage) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.DisconnectGuildMessage)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.DisconnectGuildMessage) when calling interceptor")
					}
					return c.callIntegrationsDiscordDisconnectGuild(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsDiscordDisconnectGuild(ctx context.Context, in *messages_integrations_discord.DisconnectGuildMessage) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[27], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsDiscordGetGuildChannels(ctx context.Context, in *messages_integrations_discord.GetGuildChannelsRequest) (*messages_integrations_discord.GetGuildChannelsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetGuildChannels")
	caller := c.callIntegrationsDiscordGetGuildChannels
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_discord.GetGuildChannelsRequest) (*messages_integrations_discord.GetGuildChannelsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.GetGuildChannelsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.GetGuildChannelsRequest) when calling interceptor")
					}
					return c.callIntegrationsDiscordGetGuildChannels(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetGuildChannelsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetGuildChannelsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsDiscordGetGuildChannels(ctx context.Context, in *messages_integrations_discord.GetGuildChannelsRequest) (*messages_integrations_discord.GetGuildChannelsResponse, error) {
	out := new(messages_integrations_discord.GetGuildChannelsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[28], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsDiscordGetGuildInfo(ctx context.Context, in *messages_integrations_discord.GetGuildInfoRequest) (*messages_integrations_discord.GetGuildInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetGuildInfo")
	caller := c.callIntegrationsDiscordGetGuildInfo
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_discord.GetGuildInfoRequest) (*messages_integrations_discord.GetGuildInfoResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.GetGuildInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.GetGuildInfoRequest) when calling interceptor")
					}
					return c.callIntegrationsDiscordGetGuildInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetGuildInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetGuildInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsDiscordGetGuildInfo(ctx context.Context, in *messages_integrations_discord.GetGuildInfoRequest) (*messages_integrations_discord.GetGuildInfoResponse, error) {
	out := new(messages_integrations_discord.GetGuildInfoResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[29], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) ModulesOBSWebsocketGet(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_obs_websocket.GetResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesOBSWebsocketGet")
	caller := c.callModulesOBSWebsocketGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_obs_websocket.GetResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callModulesOBSWebsocketGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_obs_websocket.GetResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_obs_websocket.GetResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callModulesOBSWebsocketGet(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_obs_websocket.GetResponse, error) {
	out := new(messages_modules_obs_websocket.GetResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[30], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) ModulesOBSWebsocketUpdate(ctx context.Context, in *messages_modules_obs_websocket.PostRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesOBSWebsocketUpdate")
	caller := c.callModulesOBSWebsocketUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_modules_obs_websocket.PostRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_obs_websocket.PostRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_obs_websocket.PostRequest) when calling interceptor")
					}
					return c.callModulesOBSWebsocketUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callModulesOBSWebsocketUpdate(ctx context.Context, in *messages_modules_obs_websocket.PostRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[31], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) ModulesTTSGet(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_tts.GetResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSGet")
	caller := c.callModulesTTSGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_tts.GetResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callModulesTTSGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.GetResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.GetResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callModulesTTSGet(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_tts.GetResponse, error) {
	out := new(messages_modules_tts.GetResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[32], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) ModulesTTSUpdate(ctx context.Context, in *messages_modules_tts.PostRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSUpdate")
	caller := c.callModulesTTSUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_modules_tts.PostRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_tts.PostRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_tts.PostRequest) when calling interceptor")
					}
					return c.callModulesTTSUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callModulesTTSUpdate(ctx context.Context, in *messages_modules_tts.PostRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[33], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) ModulesTTSGetInfo(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_tts.GetInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSGetInfo")
	caller := c.callModulesTTSGetInfo
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_tts.GetInfoResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callModulesTTSGetInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.GetInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.GetInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callModulesTTSGetInfo(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_tts.GetInfoResponse, error) {
	out := new(messages_modules_tts.GetInfoResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[34], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) ModulesTTSGetUsersSettings(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_tts.GetUsersSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSGetUsersSettings")
	caller := c.callModulesTTSGetUsersSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_tts.GetUsersSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callModulesTTSGetUsersSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.GetUsersSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.GetUsersSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callModulesTTSGetUsersSettings(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_tts.GetUsersSettingsResponse, error) {
	out := new(messages_modules_tts.GetUsersSettingsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[35], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) ModulesTTSUsersDelete(ctx context.Context, in *messages_modules_tts.UsersDeleteRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSUsersDelete")
	caller := c.callModulesTTSUsersDelete
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_modules_tts.UsersDeleteRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_tts.UsersDeleteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_tts.UsersDeleteRequest) when calling interceptor")
					}
					return c.callModulesTTSUsersDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callModulesTTSUsersDelete(ctx context.Context, in *messages_modules_tts.UsersDeleteRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[36], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) OverlayBeRightBackGet(ctx context.Context, in *google_protobuf.Empty) (*messages_overlays_be_right_back.Settings, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlayBeRightBackGet")
	caller := c.callOverlayBeRightBackGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_overlays_be_right_back.Settings, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callOverlayBeRightBackGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays_be_right_back.Settings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays_be_right_back.Settings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callOverlayBeRightBackGet(ctx context.Context, in *google_protobuf.Empty) (*messages_overlays_be_right_back.Settings, error) {
	out := new(messages_overlays_be_right_back.Settings)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[37], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) OverlayBeRightBackUpdate(ctx context.Context, in *messages_overlays_be_right_back.Settings) (*messages_overlays_be_right_back.Settings, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlayBeRightBackUpdate")
	caller := c.callOverlayBeRightBackUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_overlays_be_right_back.Settings) (*messages_overlays_be_right_back.Settings, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays_be_right_back.Settings)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays_be_right_back.Settings) when calling interceptor")
					}
					return c.callOverlayBeRightBackUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays_be_right_back.Settings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays_be_right_back.Settings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callOverlayBeRightBackUpdate(ctx context.Context, in *messages_overlays_be_right_back.Settings) (*messages_overlays_be_right_back.Settings, error) {
	out := new(messages_overlays_be_right_back.Settings)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[38], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) TwitchSearchCategories(ctx context.Context, in *messages_twitch_protected.SearchCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "TwitchSearchCategories")
	caller := c.callTwitchSearchCategories
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_twitch_protected.SearchCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch_protected.SearchCategoriesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch_protected.SearchCategoriesRequest) when calling interceptor")
					}
					return c.callTwitchSearchCategories(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch_protected.SearchCategoriesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch_protected.SearchCategoriesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callTwitchSearchCategories(ctx context.Context, in *messages_twitch_protected.SearchCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
	out := new(messages_twitch_protected.SearchCategoriesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[39], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) TwitchGetCategories(ctx context.Context, in *messages_twitch_protected.GetCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "TwitchGetCategories")
	caller := c.callTwitchGetCategories
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_twitch_protected.GetCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch_protected.GetCategoriesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch_protected.GetCategoriesRequest) when calling interceptor")
					}
					return c.callTwitchGetCategories(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch_protected.SearchCategoriesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch_protected.SearchCategoriesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callTwitchGetCategories(ctx context.Context, in *messages_twitch_protected.GetCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
	out := new(messages_twitch_protected.SearchCategoriesResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[40], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) TwitchSetChannelInformation(ctx context.Context, in *messages_twitch_protected.SetChannelInformationRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "TwitchSetChannelInformation")
	caller := c.callTwitchSetChannelInformation
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_twitch_protected.SetChannelInformationRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch_protected.SetChannelInformationRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch_protected.SetChannelInformationRequest) when calling interceptor")
					}
					return c.callTwitchSetChannelInformation(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callTwitchSetChannelInformation(ctx context.Context, in *messages_twitch_protected.SetChannelInformationRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[41], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) OverlaysGetAll(ctx context.Context, in *google_protobuf.Empty) (*messages_overlays.GetAllResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysGetAll")
	caller := c.callOverlaysGetAll
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_overlays.GetAllResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callOverlaysGetAll(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.GetAllResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.GetAllResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callOverlaysGetAll(ctx context.Context, in *google_protobuf.Empty) (*messages_overlays.GetAllResponse, error) {
	out := new(messages_overlays.GetAllResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[42], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) OverlaysGetOne(ctx context.Context, in *messages_overlays.GetByIdRequest) (*messages_overlays.Overlay, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysGetOne")
	caller := c.callOverlaysGetOne
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_overlays.GetByIdRequest) (*messages_overlays.Overlay, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.GetByIdRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.GetByIdRequest) when calling interceptor")
					}
					return c.callOverlaysGetOne(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.Overlay)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.Overlay) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callOverlaysGetOne(ctx context.Context, in *messages_overlays.GetByIdRequest) (*messages_overlays.Overlay, error) {
	out := new(messages_overlays.Overlay)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[43], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) OverlaysUpdate(ctx context.Context, in *messages_overlays.UpdateRequest) (*messages_overlays.Overlay, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysUpdate")
	caller := c.callOverlaysUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_overlays.UpdateRequest) (*messages_overlays.Overlay, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.UpdateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.UpdateRequest) when calling interceptor")
					}
					return c.callOverlaysUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.Overlay)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.Overlay) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callOverlaysUpdate(ctx context.Context, in *messages_overlays.UpdateRequest) (*messages_overlays.Overlay, error) {
	out := new(messages_overlays.Overlay)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[44], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) OverlaysDelete(ctx context.Context, in *messages_overlays.DeleteRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysDelete")
	caller := c.callOverlaysDelete
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_overlays.DeleteRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.DeleteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.DeleteRequest) when calling interceptor")
					}
					return c.callOverlaysDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callOverlaysDelete(ctx context.Context, in *messages_overlays.DeleteRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[45], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) OverlaysCreate(ctx context.Context, in *messages_overlays.CreateRequest) (*messages_overlays.Overlay, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysCreate")
	caller := c.callOverlaysCreate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_overlays.CreateRequest) (*messages_overlays.Overlay, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.CreateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.CreateRequest) when calling interceptor")
					}
					return c.callOverlaysCreate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.Overlay)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.Overlay) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callOverlaysCreate(ctx context.Context, in *messages_overlays.CreateRequest) (*messages_overlays.Overlay, error) {
	out := new(messages_overlays.Overlay)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[46], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) OverlaysParseHtml(ctx context.Context, in *messages_overlays.ParseHtmlOverlayRequest) (*messages_overlays.ParseHtmlOverlayResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysParseHtml")
	caller := c.callOverlaysParseHtml
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_overlays.ParseHtmlOverlayRequest) (*messages_overlays.ParseHtmlOverlayResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.ParseHtmlOverlayRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.ParseHtmlOverlayRequest) when calling interceptor")
					}
					return c.callOverlaysParseHtml(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.ParseHtmlOverlayResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.ParseHtmlOverlayResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callOverlaysParseHtml(ctx context.Context, in *messages_overlays.ParseHtmlOverlayRequest) (*messages_overlays.ParseHtmlOverlayResponse, error) {
	out := new(messages_overlays.ParseHtmlOverlayResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[47], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsValorantGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_valorant.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantGetAuthLink")
	caller := c.callIntegrationsValorantGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_valorant.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsValorantGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_valorant.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_valorant.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsValorantGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_valorant.GetAuthLink, error) {
	out := new(messages_integrations_valorant.GetAuthLink)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[48], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsValorantGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_valorant.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantGetData")
	caller := c.callIntegrationsValorantGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_valorant.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsValorantGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_valorant.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_valorant.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsValorantGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_valorant.GetDataResponse, error) {
	out := new(messages_integrations_valorant.GetDataResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[49], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsValorantPostCode(ctx context.Context, in *messages_integrations_valorant.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantPostCode")
	caller := c.callIntegrationsValorantPostCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_valorant.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_valorant.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_valorant.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationsValorantPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsValorantPostCode(ctx context.Context, in *messages_integrations_valorant.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[50], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedProtobufClient) IntegrationsValorantLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantLogout")
	caller := c.callIntegrationsValorantLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsValorantLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedProtobufClient) callIntegrationsValorantLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[51], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =====================
// Protected JSON Client
// =====================

type protectedJSONClient struct {
	client      HTTPClient
	urls        [52]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewProtectedJSONClient creates a JSON client that implements the Protected interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewProtectedJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) Protected {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "api", "Protected")
	urls := [52]string{
		serviceURL + "IntegrationsFaceitGetAuthLink",
		serviceURL + "IntegrationsFaceitGetData",
		serviceURL + "IntegrationsFaceitUpdate",
		serviceURL + "IntegrationsFaceitPostCode",
		serviceURL + "IntegrationsFaceitLogout",
		serviceURL + "IntegrationsLastFMGetAuthLink",
		serviceURL + "IntegrationsLastFMGetData",
		serviceURL + "IntegrationsLastFMPostCode",
		serviceURL + "IntegrationsLastFMLogout",
		serviceURL + "IntegrationsStreamlabsGetAuthLink",
		serviceURL + "IntegrationsStreamlabsGetData",
		serviceURL + "IntegrationsStreamlabsPostCode",
		serviceURL + "IntegrationsStreamlabsLogout",
		serviceURL + "IntegrationsNightbotGetAuthLink",
		serviceURL + "IntegrationsNightbotGetData",
		serviceURL + "IntegrationsNightbotPostCode",
		serviceURL + "IntegrationsNightbotLogout",
		serviceURL + "IntegrationsNightbotImportCommands",
		serviceURL + "IntegrationsNightbotImportTimers",
		serviceURL + "IntegrationsVKGetAuthLink",
		serviceURL + "IntegrationsVKGetData",
		serviceURL + "IntegrationsVKPostCode",
		serviceURL + "IntegrationsVKLogout",
		serviceURL + "IntegrationsDiscordGetAuthLink",
		serviceURL + "IntegrationsDiscordGetData",
		serviceURL + "IntegrationsDiscordUpdate",
		serviceURL + "IntegrationDiscordConnectGuild",
		serviceURL + "IntegrationsDiscordDisconnectGuild",
		serviceURL + "IntegrationsDiscordGetGuildChannels",
		serviceURL + "IntegrationsDiscordGetGuildInfo",
		serviceURL + "ModulesOBSWebsocketGet",
		serviceURL + "ModulesOBSWebsocketUpdate",
		serviceURL + "ModulesTTSGet",
		serviceURL + "ModulesTTSUpdate",
		serviceURL + "ModulesTTSGetInfo",
		serviceURL + "ModulesTTSGetUsersSettings",
		serviceURL + "ModulesTTSUsersDelete",
		serviceURL + "OverlayBeRightBackGet",
		serviceURL + "OverlayBeRightBackUpdate",
		serviceURL + "TwitchSearchCategories",
		serviceURL + "TwitchGetCategories",
		serviceURL + "TwitchSetChannelInformation",
		serviceURL + "OverlaysGetAll",
		serviceURL + "OverlaysGetOne",
		serviceURL + "OverlaysUpdate",
		serviceURL + "OverlaysDelete",
		serviceURL + "OverlaysCreate",
		serviceURL + "OverlaysParseHtml",
		serviceURL + "IntegrationsValorantGetAuthLink",
		serviceURL + "IntegrationsValorantGetData",
		serviceURL + "IntegrationsValorantPostCode",
		serviceURL + "IntegrationsValorantLogout",
	}

	return &protectedJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *protectedJSONClient) IntegrationsFaceitGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_faceit.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitGetAuthLink")
	caller := c.callIntegrationsFaceitGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_faceit.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsFaceitGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_faceit.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_faceit.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsFaceitGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_faceit.GetAuthLink, error) {
	out := new(messages_integrations_faceit.GetAuthLink)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsFaceitGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_faceit.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitGetData")
	caller := c.callIntegrationsFaceitGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_faceit.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsFaceitGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_faceit.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_faceit.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsFaceitGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_faceit.GetDataResponse, error) {
	out := new(messages_integrations_faceit.GetDataResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsFaceitUpdate(ctx context.Context, in *messages_integrations_faceit.UpdateDataRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitUpdate")
	caller := c.callIntegrationsFaceitUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_faceit.UpdateDataRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_faceit.UpdateDataRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_faceit.UpdateDataRequest) when calling interceptor")
					}
					return c.callIntegrationsFaceitUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsFaceitUpdate(ctx context.Context, in *messages_integrations_faceit.UpdateDataRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsFaceitPostCode(ctx context.Context, in *messages_integrations_faceit.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitPostCode")
	caller := c.callIntegrationsFaceitPostCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_faceit.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_faceit.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_faceit.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationsFaceitPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsFaceitPostCode(ctx context.Context, in *messages_integrations_faceit.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[3], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsFaceitLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitLogout")
	caller := c.callIntegrationsFaceitLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsFaceitLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsFaceitLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[4], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsLastFMGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_lastfm.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMGetAuthLink")
	caller := c.callIntegrationsLastFMGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_lastfm.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsLastFMGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_lastfm.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_lastfm.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsLastFMGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_lastfm.GetAuthLink, error) {
	out := new(messages_integrations_lastfm.GetAuthLink)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[5], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsLastFMGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_lastfm.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMGetData")
	caller := c.callIntegrationsLastFMGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_lastfm.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsLastFMGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_lastfm.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_lastfm.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsLastFMGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_lastfm.GetDataResponse, error) {
	out := new(messages_integrations_lastfm.GetDataResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[6], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsLastFMPostCode(ctx context.Context, in *messages_integrations_lastfm.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMPostCode")
	caller := c.callIntegrationsLastFMPostCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_lastfm.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_lastfm.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_lastfm.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationsLastFMPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsLastFMPostCode(ctx context.Context, in *messages_integrations_lastfm.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[7], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsLastFMLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMLogout")
	caller := c.callIntegrationsLastFMLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsLastFMLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsLastFMLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[8], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsStreamlabsGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_streamlabs.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsGetAuthLink")
	caller := c.callIntegrationsStreamlabsGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_streamlabs.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsStreamlabsGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_streamlabs.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_streamlabs.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsStreamlabsGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_streamlabs.GetAuthLink, error) {
	out := new(messages_integrations_streamlabs.GetAuthLink)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[9], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsStreamlabsGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_streamlabs.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsGetData")
	caller := c.callIntegrationsStreamlabsGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_streamlabs.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsStreamlabsGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_streamlabs.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_streamlabs.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsStreamlabsGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_streamlabs.GetDataResponse, error) {
	out := new(messages_integrations_streamlabs.GetDataResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[10], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsStreamlabsPostCode(ctx context.Context, in *messages_integrations_streamlabs.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsPostCode")
	caller := c.callIntegrationsStreamlabsPostCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_streamlabs.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_streamlabs.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_streamlabs.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationsStreamlabsPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsStreamlabsPostCode(ctx context.Context, in *messages_integrations_streamlabs.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[11], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsStreamlabsLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsLogout")
	caller := c.callIntegrationsStreamlabsLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsStreamlabsLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsStreamlabsLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[12], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsNightbotGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotGetAuthLink")
	caller := c.callIntegrationsNightbotGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsNightbotGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsNightbotGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.GetAuthLink, error) {
	out := new(messages_integrations_nightbot.GetAuthLink)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[13], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsNightbotGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotGetData")
	caller := c.callIntegrationsNightbotGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsNightbotGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsNightbotGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.GetDataResponse, error) {
	out := new(messages_integrations_nightbot.GetDataResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[14], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsNightbotPostCode(ctx context.Context, in *messages_integrations_nightbot.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotPostCode")
	caller := c.callIntegrationsNightbotPostCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_nightbot.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_nightbot.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_nightbot.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationsNightbotPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsNightbotPostCode(ctx context.Context, in *messages_integrations_nightbot.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[15], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsNightbotLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotLogout")
	caller := c.callIntegrationsNightbotLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsNightbotLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsNightbotLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[16], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsNightbotImportCommands(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.ImportCommandsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotImportCommands")
	caller := c.callIntegrationsNightbotImportCommands
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.ImportCommandsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsNightbotImportCommands(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.ImportCommandsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.ImportCommandsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsNightbotImportCommands(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.ImportCommandsResponse, error) {
	out := new(messages_integrations_nightbot.ImportCommandsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[17], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsNightbotImportTimers(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.ImportTimersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotImportTimers")
	caller := c.callIntegrationsNightbotImportTimers
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.ImportTimersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsNightbotImportTimers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.ImportTimersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.ImportTimersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsNightbotImportTimers(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_nightbot.ImportTimersResponse, error) {
	out := new(messages_integrations_nightbot.ImportTimersResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[18], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsVKGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_vk.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKGetAuthLink")
	caller := c.callIntegrationsVKGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_vk.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsVKGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_vk.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_vk.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsVKGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_vk.GetAuthLink, error) {
	out := new(messages_integrations_vk.GetAuthLink)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[19], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsVKGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_vk.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKGetData")
	caller := c.callIntegrationsVKGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_vk.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsVKGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_vk.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_vk.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsVKGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_vk.GetDataResponse, error) {
	out := new(messages_integrations_vk.GetDataResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[20], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsVKPostCode(ctx context.Context, in *messages_integrations_vk.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKPostCode")
	caller := c.callIntegrationsVKPostCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_vk.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_vk.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_vk.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationsVKPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsVKPostCode(ctx context.Context, in *messages_integrations_vk.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[21], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsVKLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKLogout")
	caller := c.callIntegrationsVKLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsVKLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsVKLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[22], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsDiscordGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_discord.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetAuthLink")
	caller := c.callIntegrationsDiscordGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_discord.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsDiscordGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsDiscordGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_discord.GetAuthLink, error) {
	out := new(messages_integrations_discord.GetAuthLink)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[23], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsDiscordGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_discord.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetData")
	caller := c.callIntegrationsDiscordGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_discord.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsDiscordGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsDiscordGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_discord.GetDataResponse, error) {
	out := new(messages_integrations_discord.GetDataResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[24], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsDiscordUpdate(ctx context.Context, in *messages_integrations_discord.UpdateMessage) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordUpdate")
	caller := c.callIntegrationsDiscordUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_discord.UpdateMessage) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.UpdateMessage)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.UpdateMessage) when calling interceptor")
					}
					return c.callIntegrationsDiscordUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsDiscordUpdate(ctx context.Context, in *messages_integrations_discord.UpdateMessage) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[25], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationDiscordConnectGuild(ctx context.Context, in *messages_integrations_discord.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationDiscordConnectGuild")
	caller := c.callIntegrationDiscordConnectGuild
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_discord.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationDiscordConnectGuild(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationDiscordConnectGuild(ctx context.Context, in *messages_integrations_discord.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[26], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsDiscordDisconnectGuild(ctx context.Context, in *messages_integrations_discord.DisconnectGuildMessage) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordDisconnectGuild")
	caller := c.callIntegrationsDiscordDisconnectGuild
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_discord.DisconnectGuildMessage) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.DisconnectGuildMessage)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.DisconnectGuildMessage) when calling interceptor")
					}
					return c.callIntegrationsDiscordDisconnectGuild(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsDiscordDisconnectGuild(ctx context.Context, in *messages_integrations_discord.DisconnectGuildMessage) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[27], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsDiscordGetGuildChannels(ctx context.Context, in *messages_integrations_discord.GetGuildChannelsRequest) (*messages_integrations_discord.GetGuildChannelsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetGuildChannels")
	caller := c.callIntegrationsDiscordGetGuildChannels
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_discord.GetGuildChannelsRequest) (*messages_integrations_discord.GetGuildChannelsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.GetGuildChannelsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.GetGuildChannelsRequest) when calling interceptor")
					}
					return c.callIntegrationsDiscordGetGuildChannels(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetGuildChannelsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetGuildChannelsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsDiscordGetGuildChannels(ctx context.Context, in *messages_integrations_discord.GetGuildChannelsRequest) (*messages_integrations_discord.GetGuildChannelsResponse, error) {
	out := new(messages_integrations_discord.GetGuildChannelsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[28], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsDiscordGetGuildInfo(ctx context.Context, in *messages_integrations_discord.GetGuildInfoRequest) (*messages_integrations_discord.GetGuildInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetGuildInfo")
	caller := c.callIntegrationsDiscordGetGuildInfo
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_discord.GetGuildInfoRequest) (*messages_integrations_discord.GetGuildInfoResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.GetGuildInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.GetGuildInfoRequest) when calling interceptor")
					}
					return c.callIntegrationsDiscordGetGuildInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetGuildInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetGuildInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsDiscordGetGuildInfo(ctx context.Context, in *messages_integrations_discord.GetGuildInfoRequest) (*messages_integrations_discord.GetGuildInfoResponse, error) {
	out := new(messages_integrations_discord.GetGuildInfoResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[29], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) ModulesOBSWebsocketGet(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_obs_websocket.GetResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesOBSWebsocketGet")
	caller := c.callModulesOBSWebsocketGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_obs_websocket.GetResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callModulesOBSWebsocketGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_obs_websocket.GetResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_obs_websocket.GetResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callModulesOBSWebsocketGet(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_obs_websocket.GetResponse, error) {
	out := new(messages_modules_obs_websocket.GetResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[30], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) ModulesOBSWebsocketUpdate(ctx context.Context, in *messages_modules_obs_websocket.PostRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesOBSWebsocketUpdate")
	caller := c.callModulesOBSWebsocketUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_modules_obs_websocket.PostRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_obs_websocket.PostRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_obs_websocket.PostRequest) when calling interceptor")
					}
					return c.callModulesOBSWebsocketUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callModulesOBSWebsocketUpdate(ctx context.Context, in *messages_modules_obs_websocket.PostRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[31], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) ModulesTTSGet(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_tts.GetResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSGet")
	caller := c.callModulesTTSGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_tts.GetResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callModulesTTSGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.GetResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.GetResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callModulesTTSGet(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_tts.GetResponse, error) {
	out := new(messages_modules_tts.GetResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[32], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) ModulesTTSUpdate(ctx context.Context, in *messages_modules_tts.PostRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSUpdate")
	caller := c.callModulesTTSUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_modules_tts.PostRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_tts.PostRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_tts.PostRequest) when calling interceptor")
					}
					return c.callModulesTTSUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callModulesTTSUpdate(ctx context.Context, in *messages_modules_tts.PostRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[33], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) ModulesTTSGetInfo(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_tts.GetInfoResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSGetInfo")
	caller := c.callModulesTTSGetInfo
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_tts.GetInfoResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callModulesTTSGetInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.GetInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.GetInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callModulesTTSGetInfo(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_tts.GetInfoResponse, error) {
	out := new(messages_modules_tts.GetInfoResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[34], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) ModulesTTSGetUsersSettings(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_tts.GetUsersSettingsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSGetUsersSettings")
	caller := c.callModulesTTSGetUsersSettings
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_tts.GetUsersSettingsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callModulesTTSGetUsersSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.GetUsersSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.GetUsersSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callModulesTTSGetUsersSettings(ctx context.Context, in *google_protobuf.Empty) (*messages_modules_tts.GetUsersSettingsResponse, error) {
	out := new(messages_modules_tts.GetUsersSettingsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[35], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) ModulesTTSUsersDelete(ctx context.Context, in *messages_modules_tts.UsersDeleteRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSUsersDelete")
	caller := c.callModulesTTSUsersDelete
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_modules_tts.UsersDeleteRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_tts.UsersDeleteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_tts.UsersDeleteRequest) when calling interceptor")
					}
					return c.callModulesTTSUsersDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callModulesTTSUsersDelete(ctx context.Context, in *messages_modules_tts.UsersDeleteRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[36], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) OverlayBeRightBackGet(ctx context.Context, in *google_protobuf.Empty) (*messages_overlays_be_right_back.Settings, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlayBeRightBackGet")
	caller := c.callOverlayBeRightBackGet
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_overlays_be_right_back.Settings, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callOverlayBeRightBackGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays_be_right_back.Settings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays_be_right_back.Settings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callOverlayBeRightBackGet(ctx context.Context, in *google_protobuf.Empty) (*messages_overlays_be_right_back.Settings, error) {
	out := new(messages_overlays_be_right_back.Settings)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[37], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) OverlayBeRightBackUpdate(ctx context.Context, in *messages_overlays_be_right_back.Settings) (*messages_overlays_be_right_back.Settings, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlayBeRightBackUpdate")
	caller := c.callOverlayBeRightBackUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_overlays_be_right_back.Settings) (*messages_overlays_be_right_back.Settings, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays_be_right_back.Settings)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays_be_right_back.Settings) when calling interceptor")
					}
					return c.callOverlayBeRightBackUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays_be_right_back.Settings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays_be_right_back.Settings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callOverlayBeRightBackUpdate(ctx context.Context, in *messages_overlays_be_right_back.Settings) (*messages_overlays_be_right_back.Settings, error) {
	out := new(messages_overlays_be_right_back.Settings)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[38], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) TwitchSearchCategories(ctx context.Context, in *messages_twitch_protected.SearchCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "TwitchSearchCategories")
	caller := c.callTwitchSearchCategories
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_twitch_protected.SearchCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch_protected.SearchCategoriesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch_protected.SearchCategoriesRequest) when calling interceptor")
					}
					return c.callTwitchSearchCategories(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch_protected.SearchCategoriesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch_protected.SearchCategoriesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callTwitchSearchCategories(ctx context.Context, in *messages_twitch_protected.SearchCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
	out := new(messages_twitch_protected.SearchCategoriesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[39], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) TwitchGetCategories(ctx context.Context, in *messages_twitch_protected.GetCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "TwitchGetCategories")
	caller := c.callTwitchGetCategories
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_twitch_protected.GetCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch_protected.GetCategoriesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch_protected.GetCategoriesRequest) when calling interceptor")
					}
					return c.callTwitchGetCategories(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch_protected.SearchCategoriesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch_protected.SearchCategoriesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callTwitchGetCategories(ctx context.Context, in *messages_twitch_protected.GetCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
	out := new(messages_twitch_protected.SearchCategoriesResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[40], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) TwitchSetChannelInformation(ctx context.Context, in *messages_twitch_protected.SetChannelInformationRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "TwitchSetChannelInformation")
	caller := c.callTwitchSetChannelInformation
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_twitch_protected.SetChannelInformationRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch_protected.SetChannelInformationRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch_protected.SetChannelInformationRequest) when calling interceptor")
					}
					return c.callTwitchSetChannelInformation(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callTwitchSetChannelInformation(ctx context.Context, in *messages_twitch_protected.SetChannelInformationRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[41], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) OverlaysGetAll(ctx context.Context, in *google_protobuf.Empty) (*messages_overlays.GetAllResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysGetAll")
	caller := c.callOverlaysGetAll
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_overlays.GetAllResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callOverlaysGetAll(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.GetAllResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.GetAllResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callOverlaysGetAll(ctx context.Context, in *google_protobuf.Empty) (*messages_overlays.GetAllResponse, error) {
	out := new(messages_overlays.GetAllResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[42], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) OverlaysGetOne(ctx context.Context, in *messages_overlays.GetByIdRequest) (*messages_overlays.Overlay, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysGetOne")
	caller := c.callOverlaysGetOne
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_overlays.GetByIdRequest) (*messages_overlays.Overlay, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.GetByIdRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.GetByIdRequest) when calling interceptor")
					}
					return c.callOverlaysGetOne(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.Overlay)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.Overlay) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callOverlaysGetOne(ctx context.Context, in *messages_overlays.GetByIdRequest) (*messages_overlays.Overlay, error) {
	out := new(messages_overlays.Overlay)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[43], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) OverlaysUpdate(ctx context.Context, in *messages_overlays.UpdateRequest) (*messages_overlays.Overlay, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysUpdate")
	caller := c.callOverlaysUpdate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_overlays.UpdateRequest) (*messages_overlays.Overlay, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.UpdateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.UpdateRequest) when calling interceptor")
					}
					return c.callOverlaysUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.Overlay)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.Overlay) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callOverlaysUpdate(ctx context.Context, in *messages_overlays.UpdateRequest) (*messages_overlays.Overlay, error) {
	out := new(messages_overlays.Overlay)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[44], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) OverlaysDelete(ctx context.Context, in *messages_overlays.DeleteRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysDelete")
	caller := c.callOverlaysDelete
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_overlays.DeleteRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.DeleteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.DeleteRequest) when calling interceptor")
					}
					return c.callOverlaysDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callOverlaysDelete(ctx context.Context, in *messages_overlays.DeleteRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[45], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) OverlaysCreate(ctx context.Context, in *messages_overlays.CreateRequest) (*messages_overlays.Overlay, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysCreate")
	caller := c.callOverlaysCreate
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_overlays.CreateRequest) (*messages_overlays.Overlay, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.CreateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.CreateRequest) when calling interceptor")
					}
					return c.callOverlaysCreate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.Overlay)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.Overlay) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callOverlaysCreate(ctx context.Context, in *messages_overlays.CreateRequest) (*messages_overlays.Overlay, error) {
	out := new(messages_overlays.Overlay)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[46], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) OverlaysParseHtml(ctx context.Context, in *messages_overlays.ParseHtmlOverlayRequest) (*messages_overlays.ParseHtmlOverlayResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysParseHtml")
	caller := c.callOverlaysParseHtml
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_overlays.ParseHtmlOverlayRequest) (*messages_overlays.ParseHtmlOverlayResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.ParseHtmlOverlayRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.ParseHtmlOverlayRequest) when calling interceptor")
					}
					return c.callOverlaysParseHtml(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.ParseHtmlOverlayResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.ParseHtmlOverlayResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callOverlaysParseHtml(ctx context.Context, in *messages_overlays.ParseHtmlOverlayRequest) (*messages_overlays.ParseHtmlOverlayResponse, error) {
	out := new(messages_overlays.ParseHtmlOverlayResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[47], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsValorantGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_valorant.GetAuthLink, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantGetAuthLink")
	caller := c.callIntegrationsValorantGetAuthLink
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_valorant.GetAuthLink, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsValorantGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_valorant.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_valorant.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsValorantGetAuthLink(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_valorant.GetAuthLink, error) {
	out := new(messages_integrations_valorant.GetAuthLink)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[48], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsValorantGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_valorant.GetDataResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantGetData")
	caller := c.callIntegrationsValorantGetData
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_valorant.GetDataResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsValorantGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_valorant.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_valorant.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsValorantGetData(ctx context.Context, in *google_protobuf.Empty) (*messages_integrations_valorant.GetDataResponse, error) {
	out := new(messages_integrations_valorant.GetDataResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[49], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsValorantPostCode(ctx context.Context, in *messages_integrations_valorant.PostCodeRequest) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantPostCode")
	caller := c.callIntegrationsValorantPostCode
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_integrations_valorant.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_valorant.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_valorant.PostCodeRequest) when calling interceptor")
					}
					return c.callIntegrationsValorantPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsValorantPostCode(ctx context.Context, in *messages_integrations_valorant.PostCodeRequest) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[50], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *protectedJSONClient) IntegrationsValorantLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantLogout")
	caller := c.callIntegrationsValorantLogout
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return c.callIntegrationsValorantLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *protectedJSONClient) callIntegrationsValorantLogout(ctx context.Context, in *google_protobuf.Empty) (*google_protobuf.Empty, error) {
	out := new(google_protobuf.Empty)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[51], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ========================
// Protected Server Handler
// ========================

type protectedServer struct {
	Protected
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewProtectedServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewProtectedServer(svc Protected, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &protectedServer{
		Protected:        svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *protectedServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *protectedServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// ProtectedPathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const ProtectedPathPrefix = "/twirp/api.Protected/"

func (s *protectedServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "Protected")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "api.Protected" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "IntegrationsFaceitGetAuthLink":
		s.serveIntegrationsFaceitGetAuthLink(ctx, resp, req)
		return
	case "IntegrationsFaceitGetData":
		s.serveIntegrationsFaceitGetData(ctx, resp, req)
		return
	case "IntegrationsFaceitUpdate":
		s.serveIntegrationsFaceitUpdate(ctx, resp, req)
		return
	case "IntegrationsFaceitPostCode":
		s.serveIntegrationsFaceitPostCode(ctx, resp, req)
		return
	case "IntegrationsFaceitLogout":
		s.serveIntegrationsFaceitLogout(ctx, resp, req)
		return
	case "IntegrationsLastFMGetAuthLink":
		s.serveIntegrationsLastFMGetAuthLink(ctx, resp, req)
		return
	case "IntegrationsLastFMGetData":
		s.serveIntegrationsLastFMGetData(ctx, resp, req)
		return
	case "IntegrationsLastFMPostCode":
		s.serveIntegrationsLastFMPostCode(ctx, resp, req)
		return
	case "IntegrationsLastFMLogout":
		s.serveIntegrationsLastFMLogout(ctx, resp, req)
		return
	case "IntegrationsStreamlabsGetAuthLink":
		s.serveIntegrationsStreamlabsGetAuthLink(ctx, resp, req)
		return
	case "IntegrationsStreamlabsGetData":
		s.serveIntegrationsStreamlabsGetData(ctx, resp, req)
		return
	case "IntegrationsStreamlabsPostCode":
		s.serveIntegrationsStreamlabsPostCode(ctx, resp, req)
		return
	case "IntegrationsStreamlabsLogout":
		s.serveIntegrationsStreamlabsLogout(ctx, resp, req)
		return
	case "IntegrationsNightbotGetAuthLink":
		s.serveIntegrationsNightbotGetAuthLink(ctx, resp, req)
		return
	case "IntegrationsNightbotGetData":
		s.serveIntegrationsNightbotGetData(ctx, resp, req)
		return
	case "IntegrationsNightbotPostCode":
		s.serveIntegrationsNightbotPostCode(ctx, resp, req)
		return
	case "IntegrationsNightbotLogout":
		s.serveIntegrationsNightbotLogout(ctx, resp, req)
		return
	case "IntegrationsNightbotImportCommands":
		s.serveIntegrationsNightbotImportCommands(ctx, resp, req)
		return
	case "IntegrationsNightbotImportTimers":
		s.serveIntegrationsNightbotImportTimers(ctx, resp, req)
		return
	case "IntegrationsVKGetAuthLink":
		s.serveIntegrationsVKGetAuthLink(ctx, resp, req)
		return
	case "IntegrationsVKGetData":
		s.serveIntegrationsVKGetData(ctx, resp, req)
		return
	case "IntegrationsVKPostCode":
		s.serveIntegrationsVKPostCode(ctx, resp, req)
		return
	case "IntegrationsVKLogout":
		s.serveIntegrationsVKLogout(ctx, resp, req)
		return
	case "IntegrationsDiscordGetAuthLink":
		s.serveIntegrationsDiscordGetAuthLink(ctx, resp, req)
		return
	case "IntegrationsDiscordGetData":
		s.serveIntegrationsDiscordGetData(ctx, resp, req)
		return
	case "IntegrationsDiscordUpdate":
		s.serveIntegrationsDiscordUpdate(ctx, resp, req)
		return
	case "IntegrationDiscordConnectGuild":
		s.serveIntegrationDiscordConnectGuild(ctx, resp, req)
		return
	case "IntegrationsDiscordDisconnectGuild":
		s.serveIntegrationsDiscordDisconnectGuild(ctx, resp, req)
		return
	case "IntegrationsDiscordGetGuildChannels":
		s.serveIntegrationsDiscordGetGuildChannels(ctx, resp, req)
		return
	case "IntegrationsDiscordGetGuildInfo":
		s.serveIntegrationsDiscordGetGuildInfo(ctx, resp, req)
		return
	case "ModulesOBSWebsocketGet":
		s.serveModulesOBSWebsocketGet(ctx, resp, req)
		return
	case "ModulesOBSWebsocketUpdate":
		s.serveModulesOBSWebsocketUpdate(ctx, resp, req)
		return
	case "ModulesTTSGet":
		s.serveModulesTTSGet(ctx, resp, req)
		return
	case "ModulesTTSUpdate":
		s.serveModulesTTSUpdate(ctx, resp, req)
		return
	case "ModulesTTSGetInfo":
		s.serveModulesTTSGetInfo(ctx, resp, req)
		return
	case "ModulesTTSGetUsersSettings":
		s.serveModulesTTSGetUsersSettings(ctx, resp, req)
		return
	case "ModulesTTSUsersDelete":
		s.serveModulesTTSUsersDelete(ctx, resp, req)
		return
	case "OverlayBeRightBackGet":
		s.serveOverlayBeRightBackGet(ctx, resp, req)
		return
	case "OverlayBeRightBackUpdate":
		s.serveOverlayBeRightBackUpdate(ctx, resp, req)
		return
	case "TwitchSearchCategories":
		s.serveTwitchSearchCategories(ctx, resp, req)
		return
	case "TwitchGetCategories":
		s.serveTwitchGetCategories(ctx, resp, req)
		return
	case "TwitchSetChannelInformation":
		s.serveTwitchSetChannelInformation(ctx, resp, req)
		return
	case "OverlaysGetAll":
		s.serveOverlaysGetAll(ctx, resp, req)
		return
	case "OverlaysGetOne":
		s.serveOverlaysGetOne(ctx, resp, req)
		return
	case "OverlaysUpdate":
		s.serveOverlaysUpdate(ctx, resp, req)
		return
	case "OverlaysDelete":
		s.serveOverlaysDelete(ctx, resp, req)
		return
	case "OverlaysCreate":
		s.serveOverlaysCreate(ctx, resp, req)
		return
	case "OverlaysParseHtml":
		s.serveOverlaysParseHtml(ctx, resp, req)
		return
	case "IntegrationsValorantGetAuthLink":
		s.serveIntegrationsValorantGetAuthLink(ctx, resp, req)
		return
	case "IntegrationsValorantGetData":
		s.serveIntegrationsValorantGetData(ctx, resp, req)
		return
	case "IntegrationsValorantPostCode":
		s.serveIntegrationsValorantPostCode(ctx, resp, req)
		return
	case "IntegrationsValorantLogout":
		s.serveIntegrationsValorantLogout(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *protectedServer) serveIntegrationsFaceitGetAuthLink(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsFaceitGetAuthLinkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsFaceitGetAuthLinkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsFaceitGetAuthLinkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsFaceitGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_faceit.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsFaceitGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_faceit.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_faceit.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_faceit.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_faceit.GetAuthLink and nil error while calling IntegrationsFaceitGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsFaceitGetAuthLinkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsFaceitGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_faceit.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsFaceitGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_faceit.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_faceit.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_faceit.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_faceit.GetAuthLink and nil error while calling IntegrationsFaceitGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsFaceitGetData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsFaceitGetDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsFaceitGetDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsFaceitGetDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsFaceitGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_faceit.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsFaceitGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_faceit.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_faceit.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_faceit.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_faceit.GetDataResponse and nil error while calling IntegrationsFaceitGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsFaceitGetDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsFaceitGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_faceit.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsFaceitGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_faceit.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_faceit.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_faceit.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_faceit.GetDataResponse and nil error while calling IntegrationsFaceitGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsFaceitUpdate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsFaceitUpdateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsFaceitUpdateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsFaceitUpdateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_integrations_faceit.UpdateDataRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsFaceitUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_faceit.UpdateDataRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_faceit.UpdateDataRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_faceit.UpdateDataRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsFaceitUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsFaceitUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsFaceitUpdateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_integrations_faceit.UpdateDataRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsFaceitUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_faceit.UpdateDataRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_faceit.UpdateDataRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_faceit.UpdateDataRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsFaceitUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsFaceitUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsFaceitPostCode(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsFaceitPostCodeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsFaceitPostCodeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsFaceitPostCodeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitPostCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_integrations_faceit.PostCodeRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsFaceitPostCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_faceit.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_faceit.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_faceit.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsFaceitPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsFaceitPostCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsFaceitPostCodeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitPostCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_integrations_faceit.PostCodeRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsFaceitPostCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_faceit.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_faceit.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_faceit.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsFaceitPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsFaceitPostCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsFaceitLogout(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsFaceitLogoutJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsFaceitLogoutProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsFaceitLogoutJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitLogout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsFaceitLogout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsFaceitLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsFaceitLogout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsFaceitLogoutProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsFaceitLogout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsFaceitLogout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsFaceitLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsFaceitLogout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsLastFMGetAuthLink(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsLastFMGetAuthLinkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsLastFMGetAuthLinkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsLastFMGetAuthLinkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsLastFMGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_lastfm.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsLastFMGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_lastfm.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_lastfm.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_lastfm.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_lastfm.GetAuthLink and nil error while calling IntegrationsLastFMGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsLastFMGetAuthLinkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsLastFMGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_lastfm.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsLastFMGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_lastfm.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_lastfm.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_lastfm.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_lastfm.GetAuthLink and nil error while calling IntegrationsLastFMGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsLastFMGetData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsLastFMGetDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsLastFMGetDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsLastFMGetDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsLastFMGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_lastfm.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsLastFMGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_lastfm.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_lastfm.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_lastfm.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_lastfm.GetDataResponse and nil error while calling IntegrationsLastFMGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsLastFMGetDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsLastFMGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_lastfm.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsLastFMGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_lastfm.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_lastfm.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_lastfm.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_lastfm.GetDataResponse and nil error while calling IntegrationsLastFMGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsLastFMPostCode(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsLastFMPostCodeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsLastFMPostCodeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsLastFMPostCodeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMPostCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_integrations_lastfm.PostCodeRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsLastFMPostCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_lastfm.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_lastfm.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_lastfm.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsLastFMPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsLastFMPostCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsLastFMPostCodeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMPostCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_integrations_lastfm.PostCodeRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsLastFMPostCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_lastfm.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_lastfm.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_lastfm.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsLastFMPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsLastFMPostCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsLastFMLogout(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsLastFMLogoutJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsLastFMLogoutProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsLastFMLogoutJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMLogout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsLastFMLogout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsLastFMLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsLastFMLogout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsLastFMLogoutProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsLastFMLogout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsLastFMLogout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsLastFMLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsLastFMLogout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsStreamlabsGetAuthLink(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsStreamlabsGetAuthLinkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsStreamlabsGetAuthLinkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsStreamlabsGetAuthLinkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsStreamlabsGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_streamlabs.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsStreamlabsGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_streamlabs.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_streamlabs.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_streamlabs.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_streamlabs.GetAuthLink and nil error while calling IntegrationsStreamlabsGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsStreamlabsGetAuthLinkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsStreamlabsGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_streamlabs.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsStreamlabsGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_streamlabs.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_streamlabs.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_streamlabs.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_streamlabs.GetAuthLink and nil error while calling IntegrationsStreamlabsGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsStreamlabsGetData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsStreamlabsGetDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsStreamlabsGetDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsStreamlabsGetDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsStreamlabsGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_streamlabs.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsStreamlabsGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_streamlabs.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_streamlabs.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_streamlabs.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_streamlabs.GetDataResponse and nil error while calling IntegrationsStreamlabsGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsStreamlabsGetDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsStreamlabsGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_streamlabs.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsStreamlabsGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_streamlabs.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_streamlabs.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_streamlabs.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_streamlabs.GetDataResponse and nil error while calling IntegrationsStreamlabsGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsStreamlabsPostCode(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsStreamlabsPostCodeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsStreamlabsPostCodeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsStreamlabsPostCodeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsPostCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_integrations_streamlabs.PostCodeRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsStreamlabsPostCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_streamlabs.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_streamlabs.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_streamlabs.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsStreamlabsPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsStreamlabsPostCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsStreamlabsPostCodeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsPostCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_integrations_streamlabs.PostCodeRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsStreamlabsPostCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_streamlabs.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_streamlabs.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_streamlabs.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsStreamlabsPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsStreamlabsPostCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsStreamlabsLogout(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsStreamlabsLogoutJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsStreamlabsLogoutProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsStreamlabsLogoutJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsLogout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsStreamlabsLogout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsStreamlabsLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsStreamlabsLogout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsStreamlabsLogoutProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsStreamlabsLogout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsStreamlabsLogout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsStreamlabsLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsStreamlabsLogout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsNightbotGetAuthLink(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsNightbotGetAuthLinkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsNightbotGetAuthLinkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsNightbotGetAuthLinkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsNightbotGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsNightbotGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_nightbot.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_nightbot.GetAuthLink and nil error while calling IntegrationsNightbotGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsNightbotGetAuthLinkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsNightbotGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsNightbotGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_nightbot.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_nightbot.GetAuthLink and nil error while calling IntegrationsNightbotGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsNightbotGetData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsNightbotGetDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsNightbotGetDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsNightbotGetDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsNightbotGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsNightbotGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_nightbot.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_nightbot.GetDataResponse and nil error while calling IntegrationsNightbotGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsNightbotGetDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsNightbotGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsNightbotGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_nightbot.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_nightbot.GetDataResponse and nil error while calling IntegrationsNightbotGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsNightbotPostCode(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsNightbotPostCodeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsNightbotPostCodeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsNightbotPostCodeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotPostCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_integrations_nightbot.PostCodeRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsNightbotPostCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_nightbot.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_nightbot.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_nightbot.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsNightbotPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsNightbotPostCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsNightbotPostCodeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotPostCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_integrations_nightbot.PostCodeRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsNightbotPostCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_nightbot.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_nightbot.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_nightbot.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsNightbotPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsNightbotPostCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsNightbotLogout(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsNightbotLogoutJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsNightbotLogoutProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsNightbotLogoutJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotLogout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsNightbotLogout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsNightbotLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsNightbotLogout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsNightbotLogoutProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotLogout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsNightbotLogout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsNightbotLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsNightbotLogout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsNightbotImportCommands(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsNightbotImportCommandsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsNightbotImportCommandsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsNightbotImportCommandsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotImportCommands")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsNightbotImportCommands
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.ImportCommandsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsNightbotImportCommands(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.ImportCommandsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.ImportCommandsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_nightbot.ImportCommandsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_nightbot.ImportCommandsResponse and nil error while calling IntegrationsNightbotImportCommands. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsNightbotImportCommandsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotImportCommands")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsNightbotImportCommands
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.ImportCommandsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsNightbotImportCommands(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.ImportCommandsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.ImportCommandsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_nightbot.ImportCommandsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_nightbot.ImportCommandsResponse and nil error while calling IntegrationsNightbotImportCommands. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsNightbotImportTimers(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsNightbotImportTimersJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsNightbotImportTimersProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsNightbotImportTimersJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotImportTimers")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsNightbotImportTimers
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.ImportTimersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsNightbotImportTimers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.ImportTimersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.ImportTimersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_nightbot.ImportTimersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_nightbot.ImportTimersResponse and nil error while calling IntegrationsNightbotImportTimers. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsNightbotImportTimersProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsNightbotImportTimers")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsNightbotImportTimers
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_nightbot.ImportTimersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsNightbotImportTimers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_nightbot.ImportTimersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_nightbot.ImportTimersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_nightbot.ImportTimersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_nightbot.ImportTimersResponse and nil error while calling IntegrationsNightbotImportTimers. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsVKGetAuthLink(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsVKGetAuthLinkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsVKGetAuthLinkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsVKGetAuthLinkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsVKGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_vk.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsVKGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_vk.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_vk.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_vk.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_vk.GetAuthLink and nil error while calling IntegrationsVKGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsVKGetAuthLinkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsVKGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_vk.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsVKGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_vk.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_vk.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_vk.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_vk.GetAuthLink and nil error while calling IntegrationsVKGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsVKGetData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsVKGetDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsVKGetDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsVKGetDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsVKGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_vk.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsVKGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_vk.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_vk.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_vk.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_vk.GetDataResponse and nil error while calling IntegrationsVKGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsVKGetDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsVKGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_vk.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsVKGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_vk.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_vk.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_vk.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_vk.GetDataResponse and nil error while calling IntegrationsVKGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsVKPostCode(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsVKPostCodeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsVKPostCodeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsVKPostCodeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKPostCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_integrations_vk.PostCodeRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsVKPostCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_vk.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_vk.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_vk.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsVKPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsVKPostCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsVKPostCodeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKPostCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_integrations_vk.PostCodeRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsVKPostCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_vk.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_vk.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_vk.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsVKPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsVKPostCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsVKLogout(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsVKLogoutJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsVKLogoutProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsVKLogoutJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKLogout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsVKLogout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsVKLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsVKLogout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsVKLogoutProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsVKLogout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsVKLogout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsVKLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsVKLogout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsDiscordGetAuthLink(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsDiscordGetAuthLinkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsDiscordGetAuthLinkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsDiscordGetAuthLinkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsDiscordGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_discord.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsDiscordGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_discord.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_discord.GetAuthLink and nil error while calling IntegrationsDiscordGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsDiscordGetAuthLinkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsDiscordGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_discord.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsDiscordGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_discord.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_discord.GetAuthLink and nil error while calling IntegrationsDiscordGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsDiscordGetData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsDiscordGetDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsDiscordGetDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsDiscordGetDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsDiscordGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_discord.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsDiscordGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_discord.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_discord.GetDataResponse and nil error while calling IntegrationsDiscordGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsDiscordGetDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsDiscordGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_discord.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsDiscordGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_discord.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_discord.GetDataResponse and nil error while calling IntegrationsDiscordGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsDiscordUpdate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsDiscordUpdateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsDiscordUpdateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsDiscordUpdateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_integrations_discord.UpdateMessage)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsDiscordUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_discord.UpdateMessage) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.UpdateMessage)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.UpdateMessage) when calling interceptor")
					}
					return s.Protected.IntegrationsDiscordUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsDiscordUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsDiscordUpdateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_integrations_discord.UpdateMessage)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsDiscordUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_discord.UpdateMessage) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.UpdateMessage)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.UpdateMessage) when calling interceptor")
					}
					return s.Protected.IntegrationsDiscordUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsDiscordUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationDiscordConnectGuild(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationDiscordConnectGuildJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationDiscordConnectGuildProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationDiscordConnectGuildJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationDiscordConnectGuild")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_integrations_discord.PostCodeRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationDiscordConnectGuild
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_discord.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationDiscordConnectGuild(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationDiscordConnectGuild. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationDiscordConnectGuildProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationDiscordConnectGuild")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_integrations_discord.PostCodeRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationDiscordConnectGuild
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_discord.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationDiscordConnectGuild(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationDiscordConnectGuild. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsDiscordDisconnectGuild(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsDiscordDisconnectGuildJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsDiscordDisconnectGuildProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsDiscordDisconnectGuildJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordDisconnectGuild")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_integrations_discord.DisconnectGuildMessage)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsDiscordDisconnectGuild
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_discord.DisconnectGuildMessage) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.DisconnectGuildMessage)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.DisconnectGuildMessage) when calling interceptor")
					}
					return s.Protected.IntegrationsDiscordDisconnectGuild(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsDiscordDisconnectGuild. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsDiscordDisconnectGuildProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordDisconnectGuild")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_integrations_discord.DisconnectGuildMessage)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsDiscordDisconnectGuild
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_discord.DisconnectGuildMessage) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.DisconnectGuildMessage)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.DisconnectGuildMessage) when calling interceptor")
					}
					return s.Protected.IntegrationsDiscordDisconnectGuild(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsDiscordDisconnectGuild. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsDiscordGetGuildChannels(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsDiscordGetGuildChannelsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsDiscordGetGuildChannelsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsDiscordGetGuildChannelsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetGuildChannels")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_integrations_discord.GetGuildChannelsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsDiscordGetGuildChannels
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_discord.GetGuildChannelsRequest) (*messages_integrations_discord.GetGuildChannelsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.GetGuildChannelsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.GetGuildChannelsRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsDiscordGetGuildChannels(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetGuildChannelsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetGuildChannelsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_discord.GetGuildChannelsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_discord.GetGuildChannelsResponse and nil error while calling IntegrationsDiscordGetGuildChannels. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsDiscordGetGuildChannelsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetGuildChannels")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_integrations_discord.GetGuildChannelsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsDiscordGetGuildChannels
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_discord.GetGuildChannelsRequest) (*messages_integrations_discord.GetGuildChannelsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.GetGuildChannelsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.GetGuildChannelsRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsDiscordGetGuildChannels(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetGuildChannelsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetGuildChannelsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_discord.GetGuildChannelsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_discord.GetGuildChannelsResponse and nil error while calling IntegrationsDiscordGetGuildChannels. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsDiscordGetGuildInfo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsDiscordGetGuildInfoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsDiscordGetGuildInfoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsDiscordGetGuildInfoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetGuildInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_integrations_discord.GetGuildInfoRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsDiscordGetGuildInfo
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_discord.GetGuildInfoRequest) (*messages_integrations_discord.GetGuildInfoResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.GetGuildInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.GetGuildInfoRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsDiscordGetGuildInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetGuildInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetGuildInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_discord.GetGuildInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_discord.GetGuildInfoResponse and nil error while calling IntegrationsDiscordGetGuildInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsDiscordGetGuildInfoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsDiscordGetGuildInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_integrations_discord.GetGuildInfoRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsDiscordGetGuildInfo
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_discord.GetGuildInfoRequest) (*messages_integrations_discord.GetGuildInfoResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_discord.GetGuildInfoRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_discord.GetGuildInfoRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsDiscordGetGuildInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_discord.GetGuildInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_discord.GetGuildInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_discord.GetGuildInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_discord.GetGuildInfoResponse and nil error while calling IntegrationsDiscordGetGuildInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesOBSWebsocketGet(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveModulesOBSWebsocketGetJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveModulesOBSWebsocketGetProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveModulesOBSWebsocketGetJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesOBSWebsocketGet")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.ModulesOBSWebsocketGet
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_obs_websocket.GetResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.ModulesOBSWebsocketGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_obs_websocket.GetResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_obs_websocket.GetResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_modules_obs_websocket.GetResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_modules_obs_websocket.GetResponse and nil error while calling ModulesOBSWebsocketGet. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesOBSWebsocketGetProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesOBSWebsocketGet")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.ModulesOBSWebsocketGet
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_obs_websocket.GetResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.ModulesOBSWebsocketGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_obs_websocket.GetResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_obs_websocket.GetResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_modules_obs_websocket.GetResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_modules_obs_websocket.GetResponse and nil error while calling ModulesOBSWebsocketGet. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesOBSWebsocketUpdate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveModulesOBSWebsocketUpdateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveModulesOBSWebsocketUpdateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveModulesOBSWebsocketUpdateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesOBSWebsocketUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_modules_obs_websocket.PostRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.ModulesOBSWebsocketUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_modules_obs_websocket.PostRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_obs_websocket.PostRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_obs_websocket.PostRequest) when calling interceptor")
					}
					return s.Protected.ModulesOBSWebsocketUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling ModulesOBSWebsocketUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesOBSWebsocketUpdateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesOBSWebsocketUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_modules_obs_websocket.PostRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.ModulesOBSWebsocketUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_modules_obs_websocket.PostRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_obs_websocket.PostRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_obs_websocket.PostRequest) when calling interceptor")
					}
					return s.Protected.ModulesOBSWebsocketUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling ModulesOBSWebsocketUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesTTSGet(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveModulesTTSGetJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveModulesTTSGetProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveModulesTTSGetJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSGet")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.ModulesTTSGet
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_tts.GetResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.ModulesTTSGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.GetResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.GetResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_modules_tts.GetResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_modules_tts.GetResponse and nil error while calling ModulesTTSGet. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesTTSGetProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSGet")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.ModulesTTSGet
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_tts.GetResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.ModulesTTSGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.GetResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.GetResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_modules_tts.GetResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_modules_tts.GetResponse and nil error while calling ModulesTTSGet. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesTTSUpdate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveModulesTTSUpdateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveModulesTTSUpdateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveModulesTTSUpdateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_modules_tts.PostRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.ModulesTTSUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_modules_tts.PostRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_tts.PostRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_tts.PostRequest) when calling interceptor")
					}
					return s.Protected.ModulesTTSUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling ModulesTTSUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesTTSUpdateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_modules_tts.PostRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.ModulesTTSUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_modules_tts.PostRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_tts.PostRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_tts.PostRequest) when calling interceptor")
					}
					return s.Protected.ModulesTTSUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling ModulesTTSUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesTTSGetInfo(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveModulesTTSGetInfoJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveModulesTTSGetInfoProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveModulesTTSGetInfoJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSGetInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.ModulesTTSGetInfo
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_tts.GetInfoResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.ModulesTTSGetInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.GetInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.GetInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_modules_tts.GetInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_modules_tts.GetInfoResponse and nil error while calling ModulesTTSGetInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesTTSGetInfoProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSGetInfo")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.ModulesTTSGetInfo
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_tts.GetInfoResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.ModulesTTSGetInfo(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.GetInfoResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.GetInfoResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_modules_tts.GetInfoResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_modules_tts.GetInfoResponse and nil error while calling ModulesTTSGetInfo. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesTTSGetUsersSettings(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveModulesTTSGetUsersSettingsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveModulesTTSGetUsersSettingsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveModulesTTSGetUsersSettingsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSGetUsersSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.ModulesTTSGetUsersSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_tts.GetUsersSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.ModulesTTSGetUsersSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.GetUsersSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.GetUsersSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_modules_tts.GetUsersSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_modules_tts.GetUsersSettingsResponse and nil error while calling ModulesTTSGetUsersSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesTTSGetUsersSettingsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSGetUsersSettings")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.ModulesTTSGetUsersSettings
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_modules_tts.GetUsersSettingsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.ModulesTTSGetUsersSettings(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.GetUsersSettingsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.GetUsersSettingsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_modules_tts.GetUsersSettingsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_modules_tts.GetUsersSettingsResponse and nil error while calling ModulesTTSGetUsersSettings. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesTTSUsersDelete(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveModulesTTSUsersDeleteJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveModulesTTSUsersDeleteProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveModulesTTSUsersDeleteJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSUsersDelete")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_modules_tts.UsersDeleteRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.ModulesTTSUsersDelete
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_modules_tts.UsersDeleteRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_tts.UsersDeleteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_tts.UsersDeleteRequest) when calling interceptor")
					}
					return s.Protected.ModulesTTSUsersDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling ModulesTTSUsersDelete. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveModulesTTSUsersDeleteProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSUsersDelete")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_modules_tts.UsersDeleteRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.ModulesTTSUsersDelete
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_modules_tts.UsersDeleteRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_tts.UsersDeleteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_tts.UsersDeleteRequest) when calling interceptor")
					}
					return s.Protected.ModulesTTSUsersDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling ModulesTTSUsersDelete. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlayBeRightBackGet(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveOverlayBeRightBackGetJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveOverlayBeRightBackGetProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveOverlayBeRightBackGetJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlayBeRightBackGet")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.OverlayBeRightBackGet
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_overlays_be_right_back.Settings, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.OverlayBeRightBackGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays_be_right_back.Settings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays_be_right_back.Settings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays_be_right_back.Settings
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays_be_right_back.Settings and nil error while calling OverlayBeRightBackGet. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlayBeRightBackGetProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlayBeRightBackGet")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.OverlayBeRightBackGet
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_overlays_be_right_back.Settings, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.OverlayBeRightBackGet(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays_be_right_back.Settings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays_be_right_back.Settings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays_be_right_back.Settings
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays_be_right_back.Settings and nil error while calling OverlayBeRightBackGet. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlayBeRightBackUpdate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveOverlayBeRightBackUpdateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveOverlayBeRightBackUpdateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveOverlayBeRightBackUpdateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlayBeRightBackUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_overlays_be_right_back.Settings)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.OverlayBeRightBackUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_overlays_be_right_back.Settings) (*messages_overlays_be_right_back.Settings, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays_be_right_back.Settings)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays_be_right_back.Settings) when calling interceptor")
					}
					return s.Protected.OverlayBeRightBackUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays_be_right_back.Settings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays_be_right_back.Settings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays_be_right_back.Settings
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays_be_right_back.Settings and nil error while calling OverlayBeRightBackUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlayBeRightBackUpdateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlayBeRightBackUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_overlays_be_right_back.Settings)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.OverlayBeRightBackUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_overlays_be_right_back.Settings) (*messages_overlays_be_right_back.Settings, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays_be_right_back.Settings)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays_be_right_back.Settings) when calling interceptor")
					}
					return s.Protected.OverlayBeRightBackUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays_be_right_back.Settings)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays_be_right_back.Settings) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays_be_right_back.Settings
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays_be_right_back.Settings and nil error while calling OverlayBeRightBackUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveTwitchSearchCategories(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTwitchSearchCategoriesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTwitchSearchCategoriesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveTwitchSearchCategoriesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TwitchSearchCategories")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_twitch_protected.SearchCategoriesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.TwitchSearchCategories
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_twitch_protected.SearchCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch_protected.SearchCategoriesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch_protected.SearchCategoriesRequest) when calling interceptor")
					}
					return s.Protected.TwitchSearchCategories(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch_protected.SearchCategoriesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch_protected.SearchCategoriesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_twitch_protected.SearchCategoriesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_twitch_protected.SearchCategoriesResponse and nil error while calling TwitchSearchCategories. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveTwitchSearchCategoriesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TwitchSearchCategories")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_twitch_protected.SearchCategoriesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.TwitchSearchCategories
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_twitch_protected.SearchCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch_protected.SearchCategoriesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch_protected.SearchCategoriesRequest) when calling interceptor")
					}
					return s.Protected.TwitchSearchCategories(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch_protected.SearchCategoriesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch_protected.SearchCategoriesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_twitch_protected.SearchCategoriesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_twitch_protected.SearchCategoriesResponse and nil error while calling TwitchSearchCategories. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveTwitchGetCategories(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTwitchGetCategoriesJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTwitchGetCategoriesProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveTwitchGetCategoriesJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TwitchGetCategories")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_twitch_protected.GetCategoriesRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.TwitchGetCategories
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_twitch_protected.GetCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch_protected.GetCategoriesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch_protected.GetCategoriesRequest) when calling interceptor")
					}
					return s.Protected.TwitchGetCategories(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch_protected.SearchCategoriesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch_protected.SearchCategoriesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_twitch_protected.SearchCategoriesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_twitch_protected.SearchCategoriesResponse and nil error while calling TwitchGetCategories. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveTwitchGetCategoriesProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TwitchGetCategories")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_twitch_protected.GetCategoriesRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.TwitchGetCategories
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_twitch_protected.GetCategoriesRequest) (*messages_twitch_protected.SearchCategoriesResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch_protected.GetCategoriesRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch_protected.GetCategoriesRequest) when calling interceptor")
					}
					return s.Protected.TwitchGetCategories(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch_protected.SearchCategoriesResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch_protected.SearchCategoriesResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_twitch_protected.SearchCategoriesResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_twitch_protected.SearchCategoriesResponse and nil error while calling TwitchGetCategories. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveTwitchSetChannelInformation(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTwitchSetChannelInformationJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTwitchSetChannelInformationProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveTwitchSetChannelInformationJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TwitchSetChannelInformation")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_twitch_protected.SetChannelInformationRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.TwitchSetChannelInformation
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_twitch_protected.SetChannelInformationRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch_protected.SetChannelInformationRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch_protected.SetChannelInformationRequest) when calling interceptor")
					}
					return s.Protected.TwitchSetChannelInformation(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling TwitchSetChannelInformation. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveTwitchSetChannelInformationProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TwitchSetChannelInformation")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_twitch_protected.SetChannelInformationRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.TwitchSetChannelInformation
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_twitch_protected.SetChannelInformationRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch_protected.SetChannelInformationRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch_protected.SetChannelInformationRequest) when calling interceptor")
					}
					return s.Protected.TwitchSetChannelInformation(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling TwitchSetChannelInformation. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlaysGetAll(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveOverlaysGetAllJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveOverlaysGetAllProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveOverlaysGetAllJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysGetAll")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.OverlaysGetAll
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_overlays.GetAllResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.OverlaysGetAll(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.GetAllResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.GetAllResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays.GetAllResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays.GetAllResponse and nil error while calling OverlaysGetAll. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlaysGetAllProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysGetAll")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.OverlaysGetAll
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_overlays.GetAllResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.OverlaysGetAll(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.GetAllResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.GetAllResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays.GetAllResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays.GetAllResponse and nil error while calling OverlaysGetAll. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlaysGetOne(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveOverlaysGetOneJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveOverlaysGetOneProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveOverlaysGetOneJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysGetOne")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_overlays.GetByIdRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.OverlaysGetOne
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_overlays.GetByIdRequest) (*messages_overlays.Overlay, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.GetByIdRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.GetByIdRequest) when calling interceptor")
					}
					return s.Protected.OverlaysGetOne(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.Overlay)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.Overlay) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays.Overlay
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays.Overlay and nil error while calling OverlaysGetOne. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlaysGetOneProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysGetOne")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_overlays.GetByIdRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.OverlaysGetOne
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_overlays.GetByIdRequest) (*messages_overlays.Overlay, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.GetByIdRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.GetByIdRequest) when calling interceptor")
					}
					return s.Protected.OverlaysGetOne(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.Overlay)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.Overlay) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays.Overlay
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays.Overlay and nil error while calling OverlaysGetOne. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlaysUpdate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveOverlaysUpdateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveOverlaysUpdateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveOverlaysUpdateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_overlays.UpdateRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.OverlaysUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_overlays.UpdateRequest) (*messages_overlays.Overlay, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.UpdateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.UpdateRequest) when calling interceptor")
					}
					return s.Protected.OverlaysUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.Overlay)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.Overlay) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays.Overlay
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays.Overlay and nil error while calling OverlaysUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlaysUpdateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysUpdate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_overlays.UpdateRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.OverlaysUpdate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_overlays.UpdateRequest) (*messages_overlays.Overlay, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.UpdateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.UpdateRequest) when calling interceptor")
					}
					return s.Protected.OverlaysUpdate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.Overlay)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.Overlay) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays.Overlay
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays.Overlay and nil error while calling OverlaysUpdate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlaysDelete(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveOverlaysDeleteJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveOverlaysDeleteProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveOverlaysDeleteJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysDelete")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_overlays.DeleteRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.OverlaysDelete
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_overlays.DeleteRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.DeleteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.DeleteRequest) when calling interceptor")
					}
					return s.Protected.OverlaysDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling OverlaysDelete. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlaysDeleteProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysDelete")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_overlays.DeleteRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.OverlaysDelete
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_overlays.DeleteRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.DeleteRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.DeleteRequest) when calling interceptor")
					}
					return s.Protected.OverlaysDelete(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling OverlaysDelete. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlaysCreate(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveOverlaysCreateJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveOverlaysCreateProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveOverlaysCreateJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysCreate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_overlays.CreateRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.OverlaysCreate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_overlays.CreateRequest) (*messages_overlays.Overlay, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.CreateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.CreateRequest) when calling interceptor")
					}
					return s.Protected.OverlaysCreate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.Overlay)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.Overlay) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays.Overlay
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays.Overlay and nil error while calling OverlaysCreate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlaysCreateProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysCreate")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_overlays.CreateRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.OverlaysCreate
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_overlays.CreateRequest) (*messages_overlays.Overlay, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.CreateRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.CreateRequest) when calling interceptor")
					}
					return s.Protected.OverlaysCreate(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.Overlay)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.Overlay) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays.Overlay
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays.Overlay and nil error while calling OverlaysCreate. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlaysParseHtml(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveOverlaysParseHtmlJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveOverlaysParseHtmlProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveOverlaysParseHtmlJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysParseHtml")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_overlays.ParseHtmlOverlayRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.OverlaysParseHtml
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_overlays.ParseHtmlOverlayRequest) (*messages_overlays.ParseHtmlOverlayResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.ParseHtmlOverlayRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.ParseHtmlOverlayRequest) when calling interceptor")
					}
					return s.Protected.OverlaysParseHtml(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.ParseHtmlOverlayResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.ParseHtmlOverlayResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays.ParseHtmlOverlayResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays.ParseHtmlOverlayResponse and nil error while calling OverlaysParseHtml. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveOverlaysParseHtmlProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "OverlaysParseHtml")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_overlays.ParseHtmlOverlayRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.OverlaysParseHtml
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_overlays.ParseHtmlOverlayRequest) (*messages_overlays.ParseHtmlOverlayResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_overlays.ParseHtmlOverlayRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_overlays.ParseHtmlOverlayRequest) when calling interceptor")
					}
					return s.Protected.OverlaysParseHtml(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_overlays.ParseHtmlOverlayResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_overlays.ParseHtmlOverlayResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_overlays.ParseHtmlOverlayResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_overlays.ParseHtmlOverlayResponse and nil error while calling OverlaysParseHtml. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsValorantGetAuthLink(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsValorantGetAuthLinkJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsValorantGetAuthLinkProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsValorantGetAuthLinkJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsValorantGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_valorant.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsValorantGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_valorant.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_valorant.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_valorant.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_valorant.GetAuthLink and nil error while calling IntegrationsValorantGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsValorantGetAuthLinkProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantGetAuthLink")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsValorantGetAuthLink
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_valorant.GetAuthLink, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsValorantGetAuthLink(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_valorant.GetAuthLink)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_valorant.GetAuthLink) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_valorant.GetAuthLink
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_valorant.GetAuthLink and nil error while calling IntegrationsValorantGetAuthLink. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsValorantGetData(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsValorantGetDataJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsValorantGetDataProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsValorantGetDataJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsValorantGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_valorant.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsValorantGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_valorant.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_valorant.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_valorant.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_valorant.GetDataResponse and nil error while calling IntegrationsValorantGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsValorantGetDataProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantGetData")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsValorantGetData
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*messages_integrations_valorant.GetDataResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsValorantGetData(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_integrations_valorant.GetDataResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_integrations_valorant.GetDataResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_integrations_valorant.GetDataResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_integrations_valorant.GetDataResponse and nil error while calling IntegrationsValorantGetData. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsValorantPostCode(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsValorantPostCodeJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsValorantPostCodeProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsValorantPostCodeJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantPostCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_integrations_valorant.PostCodeRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsValorantPostCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_valorant.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_valorant.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_valorant.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsValorantPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsValorantPostCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsValorantPostCodeProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantPostCode")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_integrations_valorant.PostCodeRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsValorantPostCode
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_integrations_valorant.PostCodeRequest) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_integrations_valorant.PostCodeRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_integrations_valorant.PostCodeRequest) when calling interceptor")
					}
					return s.Protected.IntegrationsValorantPostCode(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsValorantPostCode. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsValorantLogout(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveIntegrationsValorantLogoutJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveIntegrationsValorantLogoutProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *protectedServer) serveIntegrationsValorantLogoutJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantLogout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.Protected.IntegrationsValorantLogout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsValorantLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsValorantLogout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) serveIntegrationsValorantLogoutProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "IntegrationsValorantLogout")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(google_protobuf.Empty)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.Protected.IntegrationsValorantLogout
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *google_protobuf.Empty) (*google_protobuf.Empty, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*google_protobuf.Empty)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*google_protobuf.Empty) when calling interceptor")
					}
					return s.Protected.IntegrationsValorantLogout(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*google_protobuf.Empty)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*google_protobuf.Empty) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *google_protobuf.Empty
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *google_protobuf.Empty and nil error while calling IntegrationsValorantLogout. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *protectedServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 0
}

func (s *protectedServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *protectedServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "api", "Protected")
}

// =====================
// UnProtected Interface
// =====================

type UnProtected interface {
	TwitchGetUsers(context.Context, *messages_twitch.TwitchGetUsersRequest) (*messages_twitch.TwitchGetUsersResponse, error)

	TwitchSearchChannels(context.Context, *messages_twitch.TwitchSearchChannelsRequest) (*messages_twitch.TwitchSearchChannelsResponse, error)

	ModulesTTSSay(context.Context, *messages_modules_tts.SayRequest) (*messages_modules_tts.SayResponse, error)
}

// ===========================
// UnProtected Protobuf Client
// ===========================

type unProtectedProtobufClient struct {
	client      HTTPClient
	urls        [3]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewUnProtectedProtobufClient creates a Protobuf client that implements the UnProtected interface.
// It communicates using Protobuf and can be configured with a custom HTTPClient.
func NewUnProtectedProtobufClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) UnProtected {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "api", "UnProtected")
	urls := [3]string{
		serviceURL + "TwitchGetUsers",
		serviceURL + "TwitchSearchChannels",
		serviceURL + "ModulesTTSSay",
	}

	return &unProtectedProtobufClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *unProtectedProtobufClient) TwitchGetUsers(ctx context.Context, in *messages_twitch.TwitchGetUsersRequest) (*messages_twitch.TwitchGetUsersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "UnProtected")
	ctx = ctxsetters.WithMethodName(ctx, "TwitchGetUsers")
	caller := c.callTwitchGetUsers
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_twitch.TwitchGetUsersRequest) (*messages_twitch.TwitchGetUsersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch.TwitchGetUsersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch.TwitchGetUsersRequest) when calling interceptor")
					}
					return c.callTwitchGetUsers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch.TwitchGetUsersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch.TwitchGetUsersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *unProtectedProtobufClient) callTwitchGetUsers(ctx context.Context, in *messages_twitch.TwitchGetUsersRequest) (*messages_twitch.TwitchGetUsersResponse, error) {
	out := new(messages_twitch.TwitchGetUsersResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *unProtectedProtobufClient) TwitchSearchChannels(ctx context.Context, in *messages_twitch.TwitchSearchChannelsRequest) (*messages_twitch.TwitchSearchChannelsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "UnProtected")
	ctx = ctxsetters.WithMethodName(ctx, "TwitchSearchChannels")
	caller := c.callTwitchSearchChannels
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_twitch.TwitchSearchChannelsRequest) (*messages_twitch.TwitchSearchChannelsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch.TwitchSearchChannelsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch.TwitchSearchChannelsRequest) when calling interceptor")
					}
					return c.callTwitchSearchChannels(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch.TwitchSearchChannelsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch.TwitchSearchChannelsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *unProtectedProtobufClient) callTwitchSearchChannels(ctx context.Context, in *messages_twitch.TwitchSearchChannelsRequest) (*messages_twitch.TwitchSearchChannelsResponse, error) {
	out := new(messages_twitch.TwitchSearchChannelsResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *unProtectedProtobufClient) ModulesTTSSay(ctx context.Context, in *messages_modules_tts.SayRequest) (*messages_modules_tts.SayResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "UnProtected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSSay")
	caller := c.callModulesTTSSay
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_modules_tts.SayRequest) (*messages_modules_tts.SayResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_tts.SayRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_tts.SayRequest) when calling interceptor")
					}
					return c.callModulesTTSSay(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.SayResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.SayResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *unProtectedProtobufClient) callModulesTTSSay(ctx context.Context, in *messages_modules_tts.SayRequest) (*messages_modules_tts.SayResponse, error) {
	out := new(messages_modules_tts.SayResponse)
	ctx, err := doProtobufRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// =======================
// UnProtected JSON Client
// =======================

type unProtectedJSONClient struct {
	client      HTTPClient
	urls        [3]string
	interceptor twirp.Interceptor
	opts        twirp.ClientOptions
}

// NewUnProtectedJSONClient creates a JSON client that implements the UnProtected interface.
// It communicates using JSON and can be configured with a custom HTTPClient.
func NewUnProtectedJSONClient(baseURL string, client HTTPClient, opts ...twirp.ClientOption) UnProtected {
	if c, ok := client.(*http.Client); ok {
		client = withoutRedirects(c)
	}

	clientOpts := twirp.ClientOptions{}
	for _, o := range opts {
		o(&clientOpts)
	}

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	literalURLs := false
	_ = clientOpts.ReadOpt("literalURLs", &literalURLs)
	var pathPrefix string
	if ok := clientOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	// Build method URLs: <baseURL>[<prefix>]/<package>.<Service>/<Method>
	serviceURL := sanitizeBaseURL(baseURL)
	serviceURL += baseServicePath(pathPrefix, "api", "UnProtected")
	urls := [3]string{
		serviceURL + "TwitchGetUsers",
		serviceURL + "TwitchSearchChannels",
		serviceURL + "ModulesTTSSay",
	}

	return &unProtectedJSONClient{
		client:      client,
		urls:        urls,
		interceptor: twirp.ChainInterceptors(clientOpts.Interceptors...),
		opts:        clientOpts,
	}
}

func (c *unProtectedJSONClient) TwitchGetUsers(ctx context.Context, in *messages_twitch.TwitchGetUsersRequest) (*messages_twitch.TwitchGetUsersResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "UnProtected")
	ctx = ctxsetters.WithMethodName(ctx, "TwitchGetUsers")
	caller := c.callTwitchGetUsers
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_twitch.TwitchGetUsersRequest) (*messages_twitch.TwitchGetUsersResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch.TwitchGetUsersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch.TwitchGetUsersRequest) when calling interceptor")
					}
					return c.callTwitchGetUsers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch.TwitchGetUsersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch.TwitchGetUsersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *unProtectedJSONClient) callTwitchGetUsers(ctx context.Context, in *messages_twitch.TwitchGetUsersRequest) (*messages_twitch.TwitchGetUsersResponse, error) {
	out := new(messages_twitch.TwitchGetUsersResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[0], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *unProtectedJSONClient) TwitchSearchChannels(ctx context.Context, in *messages_twitch.TwitchSearchChannelsRequest) (*messages_twitch.TwitchSearchChannelsResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "UnProtected")
	ctx = ctxsetters.WithMethodName(ctx, "TwitchSearchChannels")
	caller := c.callTwitchSearchChannels
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_twitch.TwitchSearchChannelsRequest) (*messages_twitch.TwitchSearchChannelsResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch.TwitchSearchChannelsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch.TwitchSearchChannelsRequest) when calling interceptor")
					}
					return c.callTwitchSearchChannels(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch.TwitchSearchChannelsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch.TwitchSearchChannelsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *unProtectedJSONClient) callTwitchSearchChannels(ctx context.Context, in *messages_twitch.TwitchSearchChannelsRequest) (*messages_twitch.TwitchSearchChannelsResponse, error) {
	out := new(messages_twitch.TwitchSearchChannelsResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[1], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

func (c *unProtectedJSONClient) ModulesTTSSay(ctx context.Context, in *messages_modules_tts.SayRequest) (*messages_modules_tts.SayResponse, error) {
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "UnProtected")
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSSay")
	caller := c.callModulesTTSSay
	if c.interceptor != nil {
		caller = func(ctx context.Context, req *messages_modules_tts.SayRequest) (*messages_modules_tts.SayResponse, error) {
			resp, err := c.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_tts.SayRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_tts.SayRequest) when calling interceptor")
					}
					return c.callModulesTTSSay(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.SayResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.SayResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}
	return caller(ctx, in)
}

func (c *unProtectedJSONClient) callModulesTTSSay(ctx context.Context, in *messages_modules_tts.SayRequest) (*messages_modules_tts.SayResponse, error) {
	out := new(messages_modules_tts.SayResponse)
	ctx, err := doJSONRequest(ctx, c.client, c.opts.Hooks, c.urls[2], in, out)
	if err != nil {
		twerr, ok := err.(twirp.Error)
		if !ok {
			twerr = twirp.InternalErrorWith(err)
		}
		callClientError(ctx, c.opts.Hooks, twerr)
		return nil, err
	}

	callClientResponseReceived(ctx, c.opts.Hooks)

	return out, nil
}

// ==========================
// UnProtected Server Handler
// ==========================

type unProtectedServer struct {
	UnProtected
	interceptor      twirp.Interceptor
	hooks            *twirp.ServerHooks
	pathPrefix       string // prefix for routing
	jsonSkipDefaults bool   // do not include unpopulated fields (default values) in the response
	jsonCamelCase    bool   // JSON fields are serialized as lowerCamelCase rather than keeping the original proto names
}

// NewUnProtectedServer builds a TwirpServer that can be used as an http.Handler to handle
// HTTP requests that are routed to the right method in the provided svc implementation.
// The opts are twirp.ServerOption modifiers, for example twirp.WithServerHooks(hooks).
func NewUnProtectedServer(svc UnProtected, opts ...interface{}) TwirpServer {
	serverOpts := newServerOpts(opts)

	// Using ReadOpt allows backwards and forwards compatibility with new options in the future
	jsonSkipDefaults := false
	_ = serverOpts.ReadOpt("jsonSkipDefaults", &jsonSkipDefaults)
	jsonCamelCase := false
	_ = serverOpts.ReadOpt("jsonCamelCase", &jsonCamelCase)
	var pathPrefix string
	if ok := serverOpts.ReadOpt("pathPrefix", &pathPrefix); !ok {
		pathPrefix = "/twirp" // default prefix
	}

	return &unProtectedServer{
		UnProtected:      svc,
		hooks:            serverOpts.Hooks,
		interceptor:      twirp.ChainInterceptors(serverOpts.Interceptors...),
		pathPrefix:       pathPrefix,
		jsonSkipDefaults: jsonSkipDefaults,
		jsonCamelCase:    jsonCamelCase,
	}
}

// writeError writes an HTTP response with a valid Twirp error format, and triggers hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func (s *unProtectedServer) writeError(ctx context.Context, resp http.ResponseWriter, err error) {
	writeError(ctx, resp, err, s.hooks)
}

// handleRequestBodyError is used to handle error when the twirp server cannot read request
func (s *unProtectedServer) handleRequestBodyError(ctx context.Context, resp http.ResponseWriter, msg string, err error) {
	if context.Canceled == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.Canceled, "failed to read request: context canceled"))
		return
	}
	if context.DeadlineExceeded == ctx.Err() {
		s.writeError(ctx, resp, twirp.NewError(twirp.DeadlineExceeded, "failed to read request: deadline exceeded"))
		return
	}
	s.writeError(ctx, resp, twirp.WrapError(malformedRequestError(msg), err))
}

// UnProtectedPathPrefix is a convenience constant that may identify URL paths.
// Should be used with caution, it only matches routes generated by Twirp Go clients,
// with the default "/twirp" prefix and default CamelCase service and method names.
// More info: https://twitchtv.github.io/twirp/docs/routing.html
const UnProtectedPathPrefix = "/twirp/api.UnProtected/"

func (s *unProtectedServer) ServeHTTP(resp http.ResponseWriter, req *http.Request) {
	ctx := req.Context()
	ctx = ctxsetters.WithPackageName(ctx, "api")
	ctx = ctxsetters.WithServiceName(ctx, "UnProtected")
	ctx = ctxsetters.WithResponseWriter(ctx, resp)

	var err error
	ctx, err = callRequestReceived(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	if req.Method != "POST" {
		msg := fmt.Sprintf("unsupported method %q (only POST is allowed)", req.Method)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	// Verify path format: [<prefix>]/<package>.<Service>/<Method>
	prefix, pkgService, method := parseTwirpPath(req.URL.Path)
	if pkgService != "api.UnProtected" {
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
	if prefix != s.pathPrefix {
		msg := fmt.Sprintf("invalid path prefix %q, expected %q, on path %q", prefix, s.pathPrefix, req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}

	switch method {
	case "TwitchGetUsers":
		s.serveTwitchGetUsers(ctx, resp, req)
		return
	case "TwitchSearchChannels":
		s.serveTwitchSearchChannels(ctx, resp, req)
		return
	case "ModulesTTSSay":
		s.serveModulesTTSSay(ctx, resp, req)
		return
	default:
		msg := fmt.Sprintf("no handler for path %q", req.URL.Path)
		s.writeError(ctx, resp, badRouteError(msg, req.Method, req.URL.Path))
		return
	}
}

func (s *unProtectedServer) serveTwitchGetUsers(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTwitchGetUsersJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTwitchGetUsersProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *unProtectedServer) serveTwitchGetUsersJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TwitchGetUsers")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_twitch.TwitchGetUsersRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UnProtected.TwitchGetUsers
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_twitch.TwitchGetUsersRequest) (*messages_twitch.TwitchGetUsersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch.TwitchGetUsersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch.TwitchGetUsersRequest) when calling interceptor")
					}
					return s.UnProtected.TwitchGetUsers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch.TwitchGetUsersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch.TwitchGetUsersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_twitch.TwitchGetUsersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_twitch.TwitchGetUsersResponse and nil error while calling TwitchGetUsers. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *unProtectedServer) serveTwitchGetUsersProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TwitchGetUsers")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_twitch.TwitchGetUsersRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UnProtected.TwitchGetUsers
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_twitch.TwitchGetUsersRequest) (*messages_twitch.TwitchGetUsersResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch.TwitchGetUsersRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch.TwitchGetUsersRequest) when calling interceptor")
					}
					return s.UnProtected.TwitchGetUsers(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch.TwitchGetUsersResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch.TwitchGetUsersResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_twitch.TwitchGetUsersResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_twitch.TwitchGetUsersResponse and nil error while calling TwitchGetUsers. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *unProtectedServer) serveTwitchSearchChannels(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveTwitchSearchChannelsJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveTwitchSearchChannelsProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *unProtectedServer) serveTwitchSearchChannelsJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TwitchSearchChannels")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_twitch.TwitchSearchChannelsRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UnProtected.TwitchSearchChannels
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_twitch.TwitchSearchChannelsRequest) (*messages_twitch.TwitchSearchChannelsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch.TwitchSearchChannelsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch.TwitchSearchChannelsRequest) when calling interceptor")
					}
					return s.UnProtected.TwitchSearchChannels(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch.TwitchSearchChannelsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch.TwitchSearchChannelsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_twitch.TwitchSearchChannelsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_twitch.TwitchSearchChannelsResponse and nil error while calling TwitchSearchChannels. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *unProtectedServer) serveTwitchSearchChannelsProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "TwitchSearchChannels")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_twitch.TwitchSearchChannelsRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UnProtected.TwitchSearchChannels
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_twitch.TwitchSearchChannelsRequest) (*messages_twitch.TwitchSearchChannelsResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_twitch.TwitchSearchChannelsRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_twitch.TwitchSearchChannelsRequest) when calling interceptor")
					}
					return s.UnProtected.TwitchSearchChannels(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_twitch.TwitchSearchChannelsResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_twitch.TwitchSearchChannelsResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_twitch.TwitchSearchChannelsResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_twitch.TwitchSearchChannelsResponse and nil error while calling TwitchSearchChannels. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *unProtectedServer) serveModulesTTSSay(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	header := req.Header.Get("Content-Type")
	i := strings.Index(header, ";")
	if i == -1 {
		i = len(header)
	}
	switch strings.TrimSpace(strings.ToLower(header[:i])) {
	case "application/json":
		s.serveModulesTTSSayJSON(ctx, resp, req)
	case "application/protobuf":
		s.serveModulesTTSSayProtobuf(ctx, resp, req)
	default:
		msg := fmt.Sprintf("unexpected Content-Type: %q", req.Header.Get("Content-Type"))
		twerr := badRouteError(msg, req.Method, req.URL.Path)
		s.writeError(ctx, resp, twerr)
	}
}

func (s *unProtectedServer) serveModulesTTSSayJSON(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSSay")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	d := json.NewDecoder(req.Body)
	rawReqBody := json.RawMessage{}
	if err := d.Decode(&rawReqBody); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}
	reqContent := new(messages_modules_tts.SayRequest)
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawReqBody, reqContent); err != nil {
		s.handleRequestBodyError(ctx, resp, "the json request could not be decoded", err)
		return
	}

	handler := s.UnProtected.ModulesTTSSay
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_modules_tts.SayRequest) (*messages_modules_tts.SayResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_tts.SayRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_tts.SayRequest) when calling interceptor")
					}
					return s.UnProtected.ModulesTTSSay(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.SayResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.SayResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_modules_tts.SayResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_modules_tts.SayResponse and nil error while calling ModulesTTSSay. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	marshaler := &protojson.MarshalOptions{UseProtoNames: !s.jsonCamelCase, EmitUnpopulated: !s.jsonSkipDefaults}
	respBytes, err := marshaler.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal json response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/json")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)

	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *unProtectedServer) serveModulesTTSSayProtobuf(ctx context.Context, resp http.ResponseWriter, req *http.Request) {
	var err error
	ctx = ctxsetters.WithMethodName(ctx, "ModulesTTSSay")
	ctx, err = callRequestRouted(ctx, s.hooks)
	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}

	buf, err := io.ReadAll(req.Body)
	if err != nil {
		s.handleRequestBodyError(ctx, resp, "failed to read request body", err)
		return
	}
	reqContent := new(messages_modules_tts.SayRequest)
	if err = proto.Unmarshal(buf, reqContent); err != nil {
		s.writeError(ctx, resp, malformedRequestError("the protobuf request could not be decoded"))
		return
	}

	handler := s.UnProtected.ModulesTTSSay
	if s.interceptor != nil {
		handler = func(ctx context.Context, req *messages_modules_tts.SayRequest) (*messages_modules_tts.SayResponse, error) {
			resp, err := s.interceptor(
				func(ctx context.Context, req interface{}) (interface{}, error) {
					typedReq, ok := req.(*messages_modules_tts.SayRequest)
					if !ok {
						return nil, twirp.InternalError("failed type assertion req.(*messages_modules_tts.SayRequest) when calling interceptor")
					}
					return s.UnProtected.ModulesTTSSay(ctx, typedReq)
				},
			)(ctx, req)
			if resp != nil {
				typedResp, ok := resp.(*messages_modules_tts.SayResponse)
				if !ok {
					return nil, twirp.InternalError("failed type assertion resp.(*messages_modules_tts.SayResponse) when calling interceptor")
				}
				return typedResp, err
			}
			return nil, err
		}
	}

	// Call service method
	var respContent *messages_modules_tts.SayResponse
	func() {
		defer ensurePanicResponses(ctx, resp, s.hooks)
		respContent, err = handler(ctx, reqContent)
	}()

	if err != nil {
		s.writeError(ctx, resp, err)
		return
	}
	if respContent == nil {
		s.writeError(ctx, resp, twirp.InternalError("received a nil *messages_modules_tts.SayResponse and nil error while calling ModulesTTSSay. nil responses are not supported"))
		return
	}

	ctx = callResponsePrepared(ctx, s.hooks)

	respBytes, err := proto.Marshal(respContent)
	if err != nil {
		s.writeError(ctx, resp, wrapInternal(err, "failed to marshal proto response"))
		return
	}

	ctx = ctxsetters.WithStatusCode(ctx, http.StatusOK)
	resp.Header().Set("Content-Type", "application/protobuf")
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBytes)))
	resp.WriteHeader(http.StatusOK)
	if n, err := resp.Write(respBytes); err != nil {
		msg := fmt.Sprintf("failed to write response, %d of %d bytes written: %s", n, len(respBytes), err.Error())
		twerr := twirp.NewError(twirp.Unknown, msg)
		ctx = callError(ctx, s.hooks, twerr)
	}
	callResponseSent(ctx, s.hooks)
}

func (s *unProtectedServer) ServiceDescriptor() ([]byte, int) {
	return twirpFileDescriptor0, 1
}

func (s *unProtectedServer) ProtocGenTwirpVersion() string {
	return "v8.1.3"
}

// PathPrefix returns the base service path, in the form: "/<prefix>/<package>.<Service>/"
// that is everything in a Twirp route except for the <Method>. This can be used for routing,
// for example to identify the requests that are targeted to this service in a mux.
func (s *unProtectedServer) PathPrefix() string {
	return baseServicePath(s.pathPrefix, "api", "UnProtected")
}

// =====
// Utils
// =====

// HTTPClient is the interface used by generated clients to send HTTP requests.
// It is fulfilled by *(net/http).Client, which is sufficient for most users.
// Users can provide their own implementation for special retry policies.
//
// HTTPClient implementations should not follow redirects. Redirects are
// automatically disabled if *(net/http).Client is passed to client
// constructors. See the withoutRedirects function in this file for more
// details.
type HTTPClient interface {
	Do(req *http.Request) (*http.Response, error)
}

// TwirpServer is the interface generated server structs will support: they're
// HTTP handlers with additional methods for accessing metadata about the
// service. Those accessors are a low-level API for building reflection tools.
// Most people can think of TwirpServers as just http.Handlers.
type TwirpServer interface {
	http.Handler

	// ServiceDescriptor returns gzipped bytes describing the .proto file that
	// this service was generated from. Once unzipped, the bytes can be
	// unmarshalled as a
	// google.golang.org/protobuf/types/descriptorpb.FileDescriptorProto.
	//
	// The returned integer is the index of this particular service within that
	// FileDescriptorProto's 'Service' slice of ServiceDescriptorProtos. This is a
	// low-level field, expected to be used for reflection.
	ServiceDescriptor() ([]byte, int)

	// ProtocGenTwirpVersion is the semantic version string of the version of
	// twirp used to generate this file.
	ProtocGenTwirpVersion() string

	// PathPrefix returns the HTTP URL path prefix for all methods handled by this
	// service. This can be used with an HTTP mux to route Twirp requests.
	// The path prefix is in the form: "/<prefix>/<package>.<Service>/"
	// that is, everything in a Twirp route except for the <Method> at the end.
	PathPrefix() string
}

func newServerOpts(opts []interface{}) *twirp.ServerOptions {
	serverOpts := &twirp.ServerOptions{}
	for _, opt := range opts {
		switch o := opt.(type) {
		case twirp.ServerOption:
			o(serverOpts)
		case *twirp.ServerHooks: // backwards compatibility, allow to specify hooks as an argument
			twirp.WithServerHooks(o)(serverOpts)
		case nil: // backwards compatibility, allow nil value for the argument
			continue
		default:
			panic(fmt.Sprintf("Invalid option type %T, please use a twirp.ServerOption", o))
		}
	}
	return serverOpts
}

// WriteError writes an HTTP response with a valid Twirp error format (code, msg, meta).
// Useful outside of the Twirp server (e.g. http middleware), but does not trigger hooks.
// If err is not a twirp.Error, it will get wrapped with twirp.InternalErrorWith(err)
func WriteError(resp http.ResponseWriter, err error) {
	writeError(context.Background(), resp, err, nil)
}

// writeError writes Twirp errors in the response and triggers hooks.
func writeError(ctx context.Context, resp http.ResponseWriter, err error, hooks *twirp.ServerHooks) {
	// Convert to a twirp.Error. Non-twirp errors are converted to internal errors.
	var twerr twirp.Error
	if !errors.As(err, &twerr) {
		twerr = twirp.InternalErrorWith(err)
	}

	statusCode := twirp.ServerHTTPStatusFromErrorCode(twerr.Code())
	ctx = ctxsetters.WithStatusCode(ctx, statusCode)
	ctx = callError(ctx, hooks, twerr)

	respBody := marshalErrorToJSON(twerr)

	resp.Header().Set("Content-Type", "application/json") // Error responses are always JSON
	resp.Header().Set("Content-Length", strconv.Itoa(len(respBody)))
	resp.WriteHeader(statusCode) // set HTTP status code and send response

	_, writeErr := resp.Write(respBody)
	if writeErr != nil {
		// We have three options here. We could log the error, call the Error
		// hook, or just silently ignore the error.
		//
		// Logging is unacceptable because we don't have a user-controlled
		// logger; writing out to stderr without permission is too rude.
		//
		// Calling the Error hook would confuse users: it would mean the Error
		// hook got called twice for one request, which is likely to lead to
		// duplicated log messages and metrics, no matter how well we document
		// the behavior.
		//
		// Silently ignoring the error is our least-bad option. It's highly
		// likely that the connection is broken and the original 'err' says
		// so anyway.
		_ = writeErr
	}

	callResponseSent(ctx, hooks)
}

// sanitizeBaseURL parses the the baseURL, and adds the "http" scheme if needed.
// If the URL is unparsable, the baseURL is returned unchanged.
func sanitizeBaseURL(baseURL string) string {
	u, err := url.Parse(baseURL)
	if err != nil {
		return baseURL // invalid URL will fail later when making requests
	}
	if u.Scheme == "" {
		u.Scheme = "http"
	}
	return u.String()
}

// baseServicePath composes the path prefix for the service (without <Method>).
// e.g.: baseServicePath("/twirp", "my.pkg", "MyService")
//
//	returns => "/twirp/my.pkg.MyService/"
//
// e.g.: baseServicePath("", "", "MyService")
//
//	returns => "/MyService/"
func baseServicePath(prefix, pkg, service string) string {
	fullServiceName := service
	if pkg != "" {
		fullServiceName = pkg + "." + service
	}
	return path.Join("/", prefix, fullServiceName) + "/"
}

// parseTwirpPath extracts path components form a valid Twirp route.
// Expected format: "[<prefix>]/<package>.<Service>/<Method>"
// e.g.: prefix, pkgService, method := parseTwirpPath("/twirp/pkg.Svc/MakeHat")
func parseTwirpPath(path string) (string, string, string) {
	parts := strings.Split(path, "/")
	if len(parts) < 2 {
		return "", "", ""
	}
	method := parts[len(parts)-1]
	pkgService := parts[len(parts)-2]
	prefix := strings.Join(parts[0:len(parts)-2], "/")
	return prefix, pkgService, method
}

// getCustomHTTPReqHeaders retrieves a copy of any headers that are set in
// a context through the twirp.WithHTTPRequestHeaders function.
// If there are no headers set, or if they have the wrong type, nil is returned.
func getCustomHTTPReqHeaders(ctx context.Context) http.Header {
	header, ok := twirp.HTTPRequestHeaders(ctx)
	if !ok || header == nil {
		return nil
	}
	copied := make(http.Header)
	for k, vv := range header {
		if vv == nil {
			copied[k] = nil
			continue
		}
		copied[k] = make([]string, len(vv))
		copy(copied[k], vv)
	}
	return copied
}

// newRequest makes an http.Request from a client, adding common headers.
func newRequest(ctx context.Context, url string, reqBody io.Reader, contentType string) (*http.Request, error) {
	req, err := http.NewRequest("POST", url, reqBody)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if customHeader := getCustomHTTPReqHeaders(ctx); customHeader != nil {
		req.Header = customHeader
	}
	req.Header.Set("Accept", contentType)
	req.Header.Set("Content-Type", contentType)
	req.Header.Set("Twirp-Version", "v8.1.3")
	return req, nil
}

// JSON serialization for errors
type twerrJSON struct {
	Code string            `json:"code"`
	Msg  string            `json:"msg"`
	Meta map[string]string `json:"meta,omitempty"`
}

// marshalErrorToJSON returns JSON from a twirp.Error, that can be used as HTTP error response body.
// If serialization fails, it will use a descriptive Internal error instead.
func marshalErrorToJSON(twerr twirp.Error) []byte {
	// make sure that msg is not too large
	msg := twerr.Msg()
	if len(msg) > 1e6 {
		msg = msg[:1e6]
	}

	tj := twerrJSON{
		Code: string(twerr.Code()),
		Msg:  msg,
		Meta: twerr.MetaMap(),
	}

	buf, err := json.Marshal(&tj)
	if err != nil {
		buf = []byte("{\"type\": \"" + twirp.Internal + "\", \"msg\": \"There was an error but it could not be serialized into JSON\"}") // fallback
	}

	return buf
}

// errorFromResponse builds a twirp.Error from a non-200 HTTP response.
// If the response has a valid serialized Twirp error, then it's returned.
// If not, the response status code is used to generate a similar twirp
// error. See twirpErrorFromIntermediary for more info on intermediary errors.
func errorFromResponse(resp *http.Response) twirp.Error {
	statusCode := resp.StatusCode
	statusText := http.StatusText(statusCode)

	if isHTTPRedirect(statusCode) {
		// Unexpected redirect: it must be an error from an intermediary.
		// Twirp clients don't follow redirects automatically, Twirp only handles
		// POST requests, redirects should only happen on GET and HEAD requests.
		location := resp.Header.Get("Location")
		msg := fmt.Sprintf("unexpected HTTP status code %d %q received, Location=%q", statusCode, statusText, location)
		return twirpErrorFromIntermediary(statusCode, msg, location)
	}

	respBodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return wrapInternal(err, "failed to read server error response body")
	}

	var tj twerrJSON
	dec := json.NewDecoder(bytes.NewReader(respBodyBytes))
	dec.DisallowUnknownFields()
	if err := dec.Decode(&tj); err != nil || tj.Code == "" {
		// Invalid JSON response; it must be an error from an intermediary.
		msg := fmt.Sprintf("Error from intermediary with HTTP status code %d %q", statusCode, statusText)
		return twirpErrorFromIntermediary(statusCode, msg, string(respBodyBytes))
	}

	errorCode := twirp.ErrorCode(tj.Code)
	if !twirp.IsValidErrorCode(errorCode) {
		msg := "invalid type returned from server error response: " + tj.Code
		return twirp.InternalError(msg).WithMeta("body", string(respBodyBytes))
	}

	twerr := twirp.NewError(errorCode, tj.Msg)
	for k, v := range tj.Meta {
		twerr = twerr.WithMeta(k, v)
	}
	return twerr
}

// twirpErrorFromIntermediary maps HTTP errors from non-twirp sources to twirp errors.
// The mapping is similar to gRPC: https://github.com/grpc/grpc/blob/master/doc/http-grpc-status-mapping.md.
// Returned twirp Errors have some additional metadata for inspection.
func twirpErrorFromIntermediary(status int, msg string, bodyOrLocation string) twirp.Error {
	var code twirp.ErrorCode
	if isHTTPRedirect(status) { // 3xx
		code = twirp.Internal
	} else {
		switch status {
		case 400: // Bad Request
			code = twirp.Internal
		case 401: // Unauthorized
			code = twirp.Unauthenticated
		case 403: // Forbidden
			code = twirp.PermissionDenied
		case 404: // Not Found
			code = twirp.BadRoute
		case 429: // Too Many Requests
			code = twirp.ResourceExhausted
		case 502, 503, 504: // Bad Gateway, Service Unavailable, Gateway Timeout
			code = twirp.Unavailable
		default: // All other codes
			code = twirp.Unknown
		}
	}

	twerr := twirp.NewError(code, msg)
	twerr = twerr.WithMeta("http_error_from_intermediary", "true") // to easily know if this error was from intermediary
	twerr = twerr.WithMeta("status_code", strconv.Itoa(status))
	if isHTTPRedirect(status) {
		twerr = twerr.WithMeta("location", bodyOrLocation)
	} else {
		twerr = twerr.WithMeta("body", bodyOrLocation)
	}
	return twerr
}

func isHTTPRedirect(status int) bool {
	return status >= 300 && status <= 399
}

// wrapInternal wraps an error with a prefix as an Internal error.
// The original error cause is accessible by github.com/pkg/errors.Cause.
func wrapInternal(err error, prefix string) twirp.Error {
	return twirp.InternalErrorWith(&wrappedError{prefix: prefix, cause: err})
}

type wrappedError struct {
	prefix string
	cause  error
}

func (e *wrappedError) Error() string { return e.prefix + ": " + e.cause.Error() }
func (e *wrappedError) Unwrap() error { return e.cause } // for go1.13 + errors.Is/As
func (e *wrappedError) Cause() error  { return e.cause } // for github.com/pkg/errors

// ensurePanicResponses makes sure that rpc methods causing a panic still result in a Twirp Internal
// error response (status 500), and error hooks are properly called with the panic wrapped as an error.
// The panic is re-raised so it can be handled normally with middleware.
func ensurePanicResponses(ctx context.Context, resp http.ResponseWriter, hooks *twirp.ServerHooks) {
	if r := recover(); r != nil {
		// Wrap the panic as an error so it can be passed to error hooks.
		// The original error is accessible from error hooks, but not visible in the response.
		err := errFromPanic(r)
		twerr := &internalWithCause{msg: "Internal service panic", cause: err}
		// Actually write the error
		writeError(ctx, resp, twerr, hooks)
		// If possible, flush the error to the wire.
		f, ok := resp.(http.Flusher)
		if ok {
			f.Flush()
		}

		panic(r)
	}
}

// errFromPanic returns the typed error if the recovered panic is an error, otherwise formats as error.
func errFromPanic(p interface{}) error {
	if err, ok := p.(error); ok {
		return err
	}
	return fmt.Errorf("panic: %v", p)
}

// internalWithCause is a Twirp Internal error wrapping an original error cause,
// but the original error message is not exposed on Msg(). The original error
// can be checked with go1.13+ errors.Is/As, and also by (github.com/pkg/errors).Unwrap
type internalWithCause struct {
	msg   string
	cause error
}

func (e *internalWithCause) Unwrap() error                               { return e.cause } // for go1.13 + errors.Is/As
func (e *internalWithCause) Cause() error                                { return e.cause } // for github.com/pkg/errors
func (e *internalWithCause) Error() string                               { return e.msg + ": " + e.cause.Error() }
func (e *internalWithCause) Code() twirp.ErrorCode                       { return twirp.Internal }
func (e *internalWithCause) Msg() string                                 { return e.msg }
func (e *internalWithCause) Meta(key string) string                      { return "" }
func (e *internalWithCause) MetaMap() map[string]string                  { return nil }
func (e *internalWithCause) WithMeta(key string, val string) twirp.Error { return e }

// malformedRequestError is used when the twirp server cannot unmarshal a request
func malformedRequestError(msg string) twirp.Error {
	return twirp.NewError(twirp.Malformed, msg)
}

// badRouteError is used when the twirp server cannot route a request
func badRouteError(msg string, method, url string) twirp.Error {
	err := twirp.NewError(twirp.BadRoute, msg)
	err = err.WithMeta("twirp_invalid_route", method+" "+url)
	return err
}

// withoutRedirects makes sure that the POST request can not be redirected.
// The standard library will, by default, redirect requests (including POSTs) if it gets a 302 or
// 303 response, and also 301s in go1.8. It redirects by making a second request, changing the
// method to GET and removing the body. This produces very confusing error messages, so instead we
// set a redirect policy that always errors. This stops Go from executing the redirect.
//
// We have to be a little careful in case the user-provided http.Client has its own CheckRedirect
// policy - if so, we'll run through that policy first.
//
// Because this requires modifying the http.Client, we make a new copy of the client and return it.
func withoutRedirects(in *http.Client) *http.Client {
	copy := *in
	copy.CheckRedirect = func(req *http.Request, via []*http.Request) error {
		if in.CheckRedirect != nil {
			// Run the input's redirect if it exists, in case it has side effects, but ignore any error it
			// returns, since we want to use ErrUseLastResponse.
			err := in.CheckRedirect(req, via)
			_ = err // Silly, but this makes sure generated code passes errcheck -blank, which some people use.
		}
		return http.ErrUseLastResponse
	}
	return &copy
}

// doProtobufRequest makes a Protobuf request to the remote Twirp service.
func doProtobufRequest(ctx context.Context, client HTTPClient, hooks *twirp.ClientHooks, url string, in, out proto.Message) (_ context.Context, err error) {
	reqBodyBytes, err := proto.Marshal(in)
	if err != nil {
		return ctx, wrapInternal(err, "failed to marshal proto request")
	}
	reqBody := bytes.NewBuffer(reqBodyBytes)
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, reqBody, "application/protobuf")
	if err != nil {
		return ctx, wrapInternal(err, "could not build request")
	}
	ctx, err = callClientRequestPrepared(ctx, hooks, req)
	if err != nil {
		return ctx, err
	}

	req = req.WithContext(ctx)
	resp, err := client.Do(req)
	if err != nil {
		return ctx, wrapInternal(err, "failed to do request")
	}
	defer func() { _ = resp.Body.Close() }()

	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return ctx, errorFromResponse(resp)
	}

	respBodyBytes, err := io.ReadAll(resp.Body)
	if err != nil {
		return ctx, wrapInternal(err, "failed to read response body")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if err = proto.Unmarshal(respBodyBytes, out); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal proto response")
	}
	return ctx, nil
}

// doJSONRequest makes a JSON request to the remote Twirp service.
func doJSONRequest(ctx context.Context, client HTTPClient, hooks *twirp.ClientHooks, url string, in, out proto.Message) (_ context.Context, err error) {
	marshaler := &protojson.MarshalOptions{UseProtoNames: true}
	reqBytes, err := marshaler.Marshal(in)
	if err != nil {
		return ctx, wrapInternal(err, "failed to marshal json request")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	req, err := newRequest(ctx, url, bytes.NewReader(reqBytes), "application/json")
	if err != nil {
		return ctx, wrapInternal(err, "could not build request")
	}
	ctx, err = callClientRequestPrepared(ctx, hooks, req)
	if err != nil {
		return ctx, err
	}

	req = req.WithContext(ctx)
	resp, err := client.Do(req)
	if err != nil {
		return ctx, wrapInternal(err, "failed to do request")
	}

	defer func() {
		cerr := resp.Body.Close()
		if err == nil && cerr != nil {
			err = wrapInternal(cerr, "failed to close response body")
		}
	}()

	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}

	if resp.StatusCode != 200 {
		return ctx, errorFromResponse(resp)
	}

	d := json.NewDecoder(resp.Body)
	rawRespBody := json.RawMessage{}
	if err := d.Decode(&rawRespBody); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal json response")
	}
	unmarshaler := protojson.UnmarshalOptions{DiscardUnknown: true}
	if err = unmarshaler.Unmarshal(rawRespBody, out); err != nil {
		return ctx, wrapInternal(err, "failed to unmarshal json response")
	}
	if err = ctx.Err(); err != nil {
		return ctx, wrapInternal(err, "aborted because context was done")
	}
	return ctx, nil
}

// Call twirp.ServerHooks.RequestReceived if the hook is available
func callRequestReceived(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestReceived == nil {
		return ctx, nil
	}
	return h.RequestReceived(ctx)
}

// Call twirp.ServerHooks.RequestRouted if the hook is available
func callRequestRouted(ctx context.Context, h *twirp.ServerHooks) (context.Context, error) {
	if h == nil || h.RequestRouted == nil {
		return ctx, nil
	}
	return h.RequestRouted(ctx)
}

// Call twirp.ServerHooks.ResponsePrepared if the hook is available
func callResponsePrepared(ctx context.Context, h *twirp.ServerHooks) context.Context {
	if h == nil || h.ResponsePrepared == nil {
		return ctx
	}
	return h.ResponsePrepared(ctx)
}

// Call twirp.ServerHooks.ResponseSent if the hook is available
func callResponseSent(ctx context.Context, h *twirp.ServerHooks) {
	if h == nil || h.ResponseSent == nil {
		return
	}
	h.ResponseSent(ctx)
}

// Call twirp.ServerHooks.Error if the hook is available
func callError(ctx context.Context, h *twirp.ServerHooks, err twirp.Error) context.Context {
	if h == nil || h.Error == nil {
		return ctx
	}
	return h.Error(ctx, err)
}

func callClientResponseReceived(ctx context.Context, h *twirp.ClientHooks) {
	if h == nil || h.ResponseReceived == nil {
		return
	}
	h.ResponseReceived(ctx)
}

func callClientRequestPrepared(ctx context.Context, h *twirp.ClientHooks, req *http.Request) (context.Context, error) {
	if h == nil || h.RequestPrepared == nil {
		return ctx, nil
	}
	return h.RequestPrepared(ctx, req)
}

func callClientError(ctx context.Context, h *twirp.ClientHooks, err twirp.Error) {
	if h == nil || h.Error == nil {
		return
	}
	h.Error(ctx, err)
}

var twirpFileDescriptor0 = []byte{
	// 1255 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x58, 0x5d, 0x6f, 0xdc, 0x44,
	0x14, 0x6d, 0x40, 0x42, 0xea, 0x20, 0x2a, 0x6a, 0x9a, 0x28, 0xdd, 0x14, 0x48, 0x82, 0x28, 0xa4,
	0x1f, 0xbb, 0x90, 0x42, 0x8a, 0x10, 0x42, 0x22, 0x1b, 0xba, 0x8d, 0xd8, 0x34, 0xa1, 0xbb, 0x09,
	0x12, 0x04, 0xad, 0xc6, 0xf6, 0xac, 0xd7, 0xac, 0xed, 0x31, 0x9e, 0x71, 0xa2, 0x3c, 0xf0, 0xc4,
	0x2b, 0xe2, 0x99, 0xbf, 0xc3, 0x3f, 0xab, 0x6c, 0xcf, 0xcc, 0xce, 0xd8, 0x63, 0x7b, 0xb2, 0x79,
	0xe9, 0xa6, 0x33, 0xf7, 0x9e, 0x73, 0xe7, 0x9e, 0x3b, 0x1f, 0xd7, 0xe0, 0x36, 0x8c, 0xfd, 0x6e,
	0x9c, 0x60, 0x8a, 0xad, 0xb7, 0x61, 0xec, 0x77, 0x36, 0x3c, 0x8c, 0xbd, 0x00, 0xf5, 0xf2, 0x21,
	0x3b, 0x9d, 0xf6, 0x50, 0x18, 0xd3, 0xab, 0xc2, 0xa2, 0xb3, 0x1e, 0x22, 0x42, 0xa0, 0x87, 0x48,
	0x2f, 0x44, 0x14, 0xe6, 0xff, 0xb0, 0x99, 0x3d, 0x31, 0xe3, 0x47, 0x14, 0x79, 0x09, 0xa4, 0x3e,
	0x8e, 0xc8, 0x64, 0x0a, 0x1d, 0xe4, 0x53, 0xdd, 0x58, 0xb3, 0x5f, 0x00, 0x09, 0x9d, 0x86, 0xba,
	0x31, 0xe6, 0xf7, 0xbd, 0xde, 0x8f, 0xd0, 0x04, 0xc1, 0x30, 0x80, 0x76, 0xed, 0x38, 0xf3, 0xef,
	0xea, 0xfd, 0x2f, 0xe6, 0xe5, 0xff, 0x33, 0xfb, 0x6f, 0x6b, 0xec, 0x61, 0x80, 0x13, 0x18, 0x51,
	0xfd, 0x28, 0xf3, 0xfd, 0x46, 0xef, 0xeb, 0xfa, 0xc4, 0xc1, 0x89, 0xab, 0x1d, 0x6c, 0x66, 0x8d,
	0x7c, 0x6f, 0x46, 0x6d, 0x4c, 0xf5, 0xa3, 0x15, 0xdf, 0x10, 0xbb, 0x69, 0x80, 0xc8, 0x04, 0xdb,
	0x64, 0x72, 0x89, 0x6c, 0x82, 0x9d, 0x39, 0xa2, 0xfa, 0x51, 0xe6, 0xfb, 0xb0, 0xe2, 0x4b, 0xa9,
	0xf2, 0x37, 0xb3, 0xfb, 0x4e, 0xd8, 0xe1, 0x0b, 0x94, 0x04, 0xf0, 0x8a, 0x4c, 0x6c, 0x34, 0x49,
	0xb2, 0x40, 0x26, 0x36, 0x74, 0xe6, 0x35, 0xc3, 0xcc, 0xfb, 0x0b, 0xe1, 0x4d, 0x2f, 0x7d, 0xea,
	0xcc, 0x26, 0xd9, 0x30, 0x72, 0x28, 0x72, 0x2b, 0x03, 0xcc, 0x63, 0xb3, 0xc2, 0x27, 0xfe, 0x60,
	0x16, 0x0f, 0x4a, 0x98, 0xec, 0x87, 0xcd, 0xee, 0x8a, 0x59, 0x82, 0x23, 0x8f, 0x4c, 0xd2, 0x68,
	0x41, 0x59, 0x19, 0x29, 0x7c, 0x76, 0xff, 0xdd, 0x01, 0xb7, 0x4f, 0xf8, 0x98, 0xe5, 0x82, 0x0f,
	0x0f, 0xa5, 0xa4, 0xbf, 0xc8, 0x6b, 0x79, 0x80, 0xe8, 0x0f, 0x29, 0x9d, 0x0d, 0xfd, 0x68, 0x6e,
	0xad, 0x75, 0x8b, 0x0d, 0xd4, 0xe5, 0x1b, 0xa8, 0xfb, 0x63, 0xb6, 0x81, 0x3a, 0x3b, 0xa2, 0xe2,
	0xba, 0xba, 0xdd, 0x20, 0x41, 0x6c, 0xdf, 0xb2, 0x5c, 0x70, 0x5f, 0xcb, 0x72, 0x00, 0x29, 0xac,
	0x65, 0x78, 0xda, 0xca, 0x90, 0xb9, 0xbf, 0x46, 0x24, 0xc6, 0x11, 0x41, 0xdb, 0xb7, 0x2c, 0x04,
	0xd6, 0xab, 0x2c, 0xa7, 0xb1, 0x0b, 0x29, 0xb2, 0x7a, 0xcd, 0x60, 0x85, 0x55, 0x81, 0xf7, 0x67,
	0x8a, 0x08, 0xed, 0xd4, 0x44, 0x95, 0xd3, 0x74, 0xaa, 0x34, 0x27, 0x98, 0xd0, 0x3e, 0x76, 0x91,
	0xd5, 0x12, 0x35, 0xb7, 0x6b, 0xa7, 0x19, 0xea, 0x56, 0x33, 0xc4, 0x1e, 0x4e, 0x69, 0x6d, 0xca,
	0xea, 0xd1, 0x4a, 0x3a, 0x0f, 0x21, 0xa1, 0x2f, 0x8e, 0x6e, 0xa2, 0x33, 0x3b, 0xbd, 0x1a, 0x75,
	0x16, 0x2c, 0x4b, 0xe9, 0xbc, 0x60, 0xa8, 0xe8, 0xdc, 0xa9, 0xb2, 0xb4, 0x0a, 0xc0, 0xe0, 0x96,
	0x16, 0xa0, 0xa0, 0x59, 0x5a, 0x80, 0x00, 0x6c, 0xc9, 0x68, 0x23, 0x71, 0x80, 0x9b, 0x88, 0x50,
	0xb7, 0x26, 0xe9, 0x1a, 0x50, 0x85, 0x08, 0x54, 0xb9, 0x15, 0xb6, 0x46, 0x31, 0xbe, 0x34, 0x62,
	0x2a, 0x09, 0x12, 0x82, 0x8f, 0xf4, 0x6c, 0x42, 0x14, 0x03, 0x58, 0x73, 0x61, 0x4e, 0xc0, 0x03,
	0x3d, 0xdd, 0xd2, 0xe2, 0xcc, 0xc0, 0xc7, 0x32, 0xe2, 0x2b, 0x76, 0xf3, 0x98, 0x48, 0xf3, 0xb8,
	0x66, 0x65, 0xe2, 0xf6, 0x52, 0x85, 0x99, 0x81, 0x8d, 0x1a, 0xa6, 0x46, 0x59, 0x7a, 0x06, 0x2c,
	0x25, 0x51, 0x7c, 0x35, 0x4b, 0x9c, 0x49, 0x48, 0xd2, 0x0a, 0x69, 0x2e, 0xc8, 0x2b, 0x75, 0x43,
	0x72, 0xaa, 0xa5, 0xe5, 0xb8, 0x00, 0xdb, 0x3a, 0xbc, 0xc3, 0x30, 0xc6, 0x09, 0xed, 0xe3, 0x30,
	0x84, 0x91, 0x4b, 0x6a, 0x71, 0xf7, 0xda, 0x16, 0xa6, 0xe2, 0x48, 0x29, 0x4b, 0xc0, 0x66, 0x3d,
	0xef, 0xd8, 0x0f, 0x51, 0x52, 0xcf, 0xfa, 0x95, 0x19, 0x6b, 0x81, 0x22, 0x71, 0x9e, 0xab, 0x47,
	0xe6, 0xd9, 0x4f, 0x26, 0x45, 0xf7, 0x69, 0x0d, 0xd9, 0xc5, 0xbc, 0x54, 0x6e, 0xe7, 0x60, 0xb5,
	0x82, 0xde, 0x58, 0x68, 0x3b, 0x8d, 0xc8, 0xa5, 0x12, 0xfb, 0x1d, 0xac, 0xa9, 0xe8, 0xa2, 0xb8,
	0x1a, 0x60, 0xcc, 0xcb, 0xea, 0x25, 0xb8, 0xa7, 0xc2, 0x2f, 0x5d, 0x50, 0x53, 0xf5, 0x80, 0x3a,
	0x28, 0x1e, 0xa5, 0x26, 0x99, 0x7e, 0x54, 0xb3, 0x10, 0xfe, 0xae, 0x55, 0xd3, 0x3d, 0x55, 0x37,
	0xc2, 0x82, 0xa7, 0x31, 0xe7, 0xdd, 0x76, 0x8e, 0x52, 0xe2, 0x1d, 0xb5, 0x68, 0x18, 0x0f, 0x7b,
	0xea, 0x3c, 0x69, 0x81, 0x2b, 0xcc, 0x8e, 0x0a, 0x9b, 0x86, 0xa4, 0xfd, 0xa1, 0x24, 0x8d, 0x71,
	0xf4, 0x71, 0x14, 0x21, 0x87, 0x0e, 0x52, 0x3f, 0x70, 0xad, 0xb6, 0xc0, 0xcd, 0xa5, 0x4e, 0xd5,
	0x1d, 0xcf, 0xc8, 0xf2, 0x1f, 0x89, 0xef, 0xeb, 0x16, 0xbe, 0x92, 0x7d, 0xfb, 0x12, 0xff, 0x5b,
	0x01, 0x9f, 0xe8, 0x05, 0xcb, 0x01, 0xfa, 0x33, 0x18, 0x45, 0x28, 0x20, 0xd6, 0x5e, 0xbb, 0x42,
	0x8a, 0x03, 0x5f, 0xf0, 0xf3, 0x6b, 0xfb, 0x09, 0x89, 0xff, 0x59, 0x51, 0xef, 0xa4, 0x52, 0x68,
	0x87, 0xd1, 0x14, 0x5b, 0xbb, 0x86, 0xf0, 0x99, 0x31, 0x0f, 0xe9, 0xd9, 0xb5, 0x7c, 0x44, 0x38,
	0x13, 0xb0, 0x76, 0x54, 0xb4, 0x4b, 0xc7, 0xfb, 0xa3, 0x5f, 0x78, 0x7b, 0x35, 0x40, 0xd4, 0xe4,
	0x62, 0xd4, 0xb7, 0x66, 0x03, 0x44, 0x25, 0x02, 0x1b, 0xdc, 0xd7, 0x10, 0xb0, 0x92, 0x6e, 0xc5,
	0xca, 0x2a, 0xcd, 0xe4, 0x45, 0xf7, 0x1e, 0xe3, 0x18, 0x8f, 0x47, 0x4d, 0xb1, 0x6f, 0x55, 0xf9,
	0xb2, 0x26, 0x51, 0x8d, 0xf8, 0x18, 0xbc, 0xbf, 0x40, 0x63, 0x81, 0xd6, 0x38, 0x9a, 0x85, 0x37,
	0x06, 0x77, 0x95, 0xf0, 0x72, 0x8d, 0x0d, 0xae, 0x80, 0x52, 0x88, 0x25, 0xe5, 0xa6, 0xa0, 0xa3,
	0xa0, 0x9e, 0x12, 0x94, 0x90, 0x11, 0xa2, 0xd4, 0x8f, 0x3c, 0x62, 0x72, 0x26, 0x95, 0xe0, 0x15,
	0x7f, 0x89, 0xe7, 0x37, 0xb0, 0x2a, 0xa5, 0x23, 0x33, 0x3a, 0x40, 0x01, 0xa2, 0xc8, 0xfa, 0x5c,
	0x0f, 0x25, 0x99, 0xb4, 0xa7, 0xe6, 0x1c, 0xac, 0x1e, 0x17, 0x8d, 0xf1, 0x3e, 0x7a, 0x9d, 0xdd,
	0xa8, 0xfb, 0xd0, 0x99, 0x37, 0x29, 0x28, 0x5d, 0x40, 0x35, 0x3d, 0x3b, 0x5f, 0x42, 0x7e, 0xef,
	0xaf, 0x57, 0xd1, 0x99, 0xa2, 0xe6, 0x40, 0xd7, 0xe3, 0xfc, 0x7b, 0x05, 0xac, 0x8d, 0xf3, 0x5e,
	0x7e, 0x84, 0x60, 0xe2, 0xcc, 0xfa, 0x90, 0x22, 0x0f, 0x27, 0x3e, 0x22, 0xf2, 0xb6, 0xae, 0x7c,
	0x37, 0x28, 0x1b, 0x6b, 0xb6, 0xb5, 0x81, 0x8f, 0x10, 0xed, 0x2f, 0xf0, 0x41, 0x11, 0xc4, 0x00,
	0x51, 0x29, 0x82, 0x5e, 0x03, 0x9a, 0x62, 0x79, 0x43, 0xfa, 0x18, 0x6c, 0xf0, 0x1c, 0x50, 0x76,
	0x06, 0x66, 0xd5, 0x9b, 0x84, 0xf9, 0xa1, 0x64, 0x3d, 0x6f, 0x44, 0xd5, 0x78, 0xb4, 0x17, 0xd2,
	0x11, 0xb8, 0xc3, 0xa4, 0xce, 0x1b, 0xaf, 0x20, 0x30, 0x39, 0x03, 0xc4, 0x37, 0x99, 0xc2, 0x45,
	0x5a, 0xc0, 0xcf, 0x0a, 0xdc, 0x71, 0xa4, 0x9c, 0x00, 0xb2, 0xdb, 0xfe, 0xd5, 0xa1, 0xcb, 0xa3,
	0xeb, 0x68, 0x4c, 0x18, 0x4a, 0xde, 0xdd, 0x08, 0x48, 0x56, 0x82, 0x9b, 0x1a, 0xfb, 0x62, 0xca,
	0x0c, 0x71, 0xb8, 0x40, 0x64, 0x5b, 0x52, 0x87, 0x68, 0xba, 0x15, 0xa5, 0xf8, 0xfa, 0x09, 0xaa,
	0x8b, 0xaf, 0x98, 0x32, 0x8b, 0x2f, 0x02, 0x77, 0x39, 0xe2, 0x09, 0x4c, 0x08, 0x7a, 0x49, 0xc3,
	0xc0, 0x7a, 0xa4, 0x71, 0x11, 0xb3, 0xcc, 0x9c, 0xc3, 0x3f, 0x36, 0xb2, 0x15, 0xa2, 0x95, 0xba,
	0xbd, 0x33, 0xf6, 0x75, 0xf3, 0x26, 0xdd, 0x9e, 0xf8, 0x42, 0xda, 0xd8, 0xed, 0x49, 0x4c, 0x4b,
	0x75, 0x7b, 0x32, 0x4b, 0x73, 0xb7, 0xc7, 0x99, 0x5a, 0xbb, 0x3d, 0x01, 0xb9, 0x74, 0xb7, 0xc7,
	0xa9, 0x96, 0x7d, 0x9c, 0xef, 0xfe, 0xff, 0x16, 0x78, 0xf7, 0x34, 0x5a, 0x7c, 0x92, 0x74, 0xc0,
	0x1d, 0x71, 0x26, 0xe5, 0x97, 0x84, 0xf5, 0xb0, 0x7c, 0x0e, 0x74, 0x55, 0x03, 0x1e, 0xf3, 0x67,
	0xad, 0x76, 0x22, 0x5f, 0x29, 0xb8, 0xa7, 0x9c, 0xbe, 0xfc, 0xa5, 0xf7, 0xa4, 0x06, 0x42, 0x35,
	0xe3, 0x84, 0x4f, 0x0d, 0xad, 0x05, 0xed, 0x99, 0xfc, 0x02, 0x19, 0xc1, 0x2b, 0x79, 0xef, 0xc8,
	0x97, 0xe3, 0x68, 0x51, 0xdc, 0x5b, 0x0d, 0x16, 0x1c, 0x77, 0x7f, 0xfb, 0xd7, 0x4d, 0xcf, 0xa7,
	0xb3, 0xd4, 0xee, 0x3a, 0x38, 0xec, 0xd1, 0x4b, 0x3f, 0x81, 0x71, 0x9c, 0xff, 0xf6, 0x02, 0xdf,
	0x26, 0x3d, 0x18, 0xfb, 0xf6, 0x3b, 0x79, 0xe6, 0x9f, 0xbd, 0x09, 0x00, 0x00, 0xff, 0xff, 0x4a,
	0x0e, 0xaf, 0x55, 0x22, 0x19, 0x00, 0x00,
}
