// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: websockets/websockets.proto

package websockets

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Websocket_YoutubeAddSongToQueue_FullMethodName    = "/websockets.Websocket/YoutubeAddSongToQueue"
	Websocket_YoutubeRemoveSongToQueue_FullMethodName = "/websockets.Websocket/YoutubeRemoveSongToQueue"
	Websocket_ObsCheckIsUserConnected_FullMethodName  = "/websockets.Websocket/ObsCheckIsUserConnected"
	Websocket_ObsSetScene_FullMethodName              = "/websockets.Websocket/ObsSetScene"
	Websocket_ObsToggleSource_FullMethodName          = "/websockets.Websocket/ObsToggleSource"
	Websocket_ObsToggleAudio_FullMethodName           = "/websockets.Websocket/ObsToggleAudio"
	Websocket_ObsAudioSetVolume_FullMethodName        = "/websockets.Websocket/ObsAudioSetVolume"
	Websocket_ObsAudioIncreaseVolume_FullMethodName   = "/websockets.Websocket/ObsAudioIncreaseVolume"
	Websocket_ObsAudioDecreaseVolume_FullMethodName   = "/websockets.Websocket/ObsAudioDecreaseVolume"
	Websocket_ObsAudioEnable_FullMethodName           = "/websockets.Websocket/ObsAudioEnable"
	Websocket_ObsAudioDisable_FullMethodName          = "/websockets.Websocket/ObsAudioDisable"
	Websocket_ObsStopStream_FullMethodName            = "/websockets.Websocket/ObsStopStream"
	Websocket_ObsStartStream_FullMethodName           = "/websockets.Websocket/ObsStartStream"
	Websocket_TextToSpeechSay_FullMethodName          = "/websockets.Websocket/TextToSpeechSay"
	Websocket_TextToSpeechSkip_FullMethodName         = "/websockets.Websocket/TextToSpeechSkip"
	Websocket_TriggerAlert_FullMethodName             = "/websockets.Websocket/TriggerAlert"
	Websocket_TriggerKappagen_FullMethodName          = "/websockets.Websocket/TriggerKappagen"
	Websocket_TriggerKappagenByEvent_FullMethodName   = "/websockets.Websocket/TriggerKappagenByEvent"
	Websocket_TriggerShowBrb_FullMethodName           = "/websockets.Websocket/TriggerShowBrb"
	Websocket_TriggerHideBrb_FullMethodName           = "/websockets.Websocket/TriggerHideBrb"
	Websocket_RefreshOverlaySettings_FullMethodName   = "/websockets.Websocket/RefreshOverlaySettings"
	Websocket_DudesJump_FullMethodName                = "/websockets.Websocket/DudesJump"
	Websocket_DudesUserPunished_FullMethodName        = "/websockets.Websocket/DudesUserPunished"
)

// WebsocketClient is the client API for Websocket service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebsocketClient interface {
	YoutubeAddSongToQueue(ctx context.Context, in *YoutubeAddSongToQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	YoutubeRemoveSongToQueue(ctx context.Context, in *YoutubeRemoveSongFromQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsCheckIsUserConnected(ctx context.Context, in *ObsCheckUserConnectedRequest, opts ...grpc.CallOption) (*ObsCheckUserConnectedResponse, error)
	ObsSetScene(ctx context.Context, in *ObsSetSceneMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsToggleSource(ctx context.Context, in *ObsToggleSourceMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsToggleAudio(ctx context.Context, in *ObsToggleAudioMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsAudioSetVolume(ctx context.Context, in *ObsAudioSetVolumeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsAudioIncreaseVolume(ctx context.Context, in *ObsAudioIncreaseVolumeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsAudioDecreaseVolume(ctx context.Context, in *ObsAudioDecreaseVolumeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsAudioEnable(ctx context.Context, in *ObsAudioDisableOrEnableMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsAudioDisable(ctx context.Context, in *ObsAudioDisableOrEnableMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsStopStream(ctx context.Context, in *ObsStopOrStartStream, opts ...grpc.CallOption) (*emptypb.Empty, error)
	ObsStartStream(ctx context.Context, in *ObsStopOrStartStream, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TextToSpeechSay(ctx context.Context, in *TTSMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TextToSpeechSkip(ctx context.Context, in *TTSSkipMessage, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TriggerAlert(ctx context.Context, in *TriggerAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TriggerKappagen(ctx context.Context, in *TriggerKappagenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TriggerKappagenByEvent(ctx context.Context, in *TriggerKappagenByEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TriggerShowBrb(ctx context.Context, in *TriggerShowBrbRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	TriggerHideBrb(ctx context.Context, in *TriggerHideBrbRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	RefreshOverlaySettings(ctx context.Context, in *RefreshOverlaysRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DudesJump(ctx context.Context, in *DudesJumpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DudesUserPunished(ctx context.Context, in *DudesUserPunishedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type websocketClient struct {
	cc grpc.ClientConnInterface
}

func NewWebsocketClient(cc grpc.ClientConnInterface) WebsocketClient {
	return &websocketClient{cc}
}

func (c *websocketClient) YoutubeAddSongToQueue(ctx context.Context, in *YoutubeAddSongToQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_YoutubeAddSongToQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) YoutubeRemoveSongToQueue(ctx context.Context, in *YoutubeRemoveSongFromQueueRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_YoutubeRemoveSongToQueue_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsCheckIsUserConnected(ctx context.Context, in *ObsCheckUserConnectedRequest, opts ...grpc.CallOption) (*ObsCheckUserConnectedResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ObsCheckUserConnectedResponse)
	err := c.cc.Invoke(ctx, Websocket_ObsCheckIsUserConnected_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsSetScene(ctx context.Context, in *ObsSetSceneMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_ObsSetScene_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsToggleSource(ctx context.Context, in *ObsToggleSourceMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_ObsToggleSource_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsToggleAudio(ctx context.Context, in *ObsToggleAudioMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_ObsToggleAudio_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsAudioSetVolume(ctx context.Context, in *ObsAudioSetVolumeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_ObsAudioSetVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsAudioIncreaseVolume(ctx context.Context, in *ObsAudioIncreaseVolumeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_ObsAudioIncreaseVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsAudioDecreaseVolume(ctx context.Context, in *ObsAudioDecreaseVolumeMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_ObsAudioDecreaseVolume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsAudioEnable(ctx context.Context, in *ObsAudioDisableOrEnableMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_ObsAudioEnable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsAudioDisable(ctx context.Context, in *ObsAudioDisableOrEnableMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_ObsAudioDisable_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsStopStream(ctx context.Context, in *ObsStopOrStartStream, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_ObsStopStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) ObsStartStream(ctx context.Context, in *ObsStopOrStartStream, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_ObsStartStream_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) TextToSpeechSay(ctx context.Context, in *TTSMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_TextToSpeechSay_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) TextToSpeechSkip(ctx context.Context, in *TTSSkipMessage, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_TextToSpeechSkip_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) TriggerAlert(ctx context.Context, in *TriggerAlertRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_TriggerAlert_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) TriggerKappagen(ctx context.Context, in *TriggerKappagenRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_TriggerKappagen_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) TriggerKappagenByEvent(ctx context.Context, in *TriggerKappagenByEventRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_TriggerKappagenByEvent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) TriggerShowBrb(ctx context.Context, in *TriggerShowBrbRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_TriggerShowBrb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) TriggerHideBrb(ctx context.Context, in *TriggerHideBrbRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_TriggerHideBrb_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) RefreshOverlaySettings(ctx context.Context, in *RefreshOverlaysRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_RefreshOverlaySettings_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) DudesJump(ctx context.Context, in *DudesJumpRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_DudesJump_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *websocketClient) DudesUserPunished(ctx context.Context, in *DudesUserPunishedRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, Websocket_DudesUserPunished_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebsocketServer is the server API for Websocket service.
// All implementations must embed UnimplementedWebsocketServer
// for forward compatibility.
type WebsocketServer interface {
	YoutubeAddSongToQueue(context.Context, *YoutubeAddSongToQueueRequest) (*emptypb.Empty, error)
	YoutubeRemoveSongToQueue(context.Context, *YoutubeRemoveSongFromQueueRequest) (*emptypb.Empty, error)
	ObsCheckIsUserConnected(context.Context, *ObsCheckUserConnectedRequest) (*ObsCheckUserConnectedResponse, error)
	ObsSetScene(context.Context, *ObsSetSceneMessage) (*emptypb.Empty, error)
	ObsToggleSource(context.Context, *ObsToggleSourceMessage) (*emptypb.Empty, error)
	ObsToggleAudio(context.Context, *ObsToggleAudioMessage) (*emptypb.Empty, error)
	ObsAudioSetVolume(context.Context, *ObsAudioSetVolumeMessage) (*emptypb.Empty, error)
	ObsAudioIncreaseVolume(context.Context, *ObsAudioIncreaseVolumeMessage) (*emptypb.Empty, error)
	ObsAudioDecreaseVolume(context.Context, *ObsAudioDecreaseVolumeMessage) (*emptypb.Empty, error)
	ObsAudioEnable(context.Context, *ObsAudioDisableOrEnableMessage) (*emptypb.Empty, error)
	ObsAudioDisable(context.Context, *ObsAudioDisableOrEnableMessage) (*emptypb.Empty, error)
	ObsStopStream(context.Context, *ObsStopOrStartStream) (*emptypb.Empty, error)
	ObsStartStream(context.Context, *ObsStopOrStartStream) (*emptypb.Empty, error)
	TextToSpeechSay(context.Context, *TTSMessage) (*emptypb.Empty, error)
	TextToSpeechSkip(context.Context, *TTSSkipMessage) (*emptypb.Empty, error)
	TriggerAlert(context.Context, *TriggerAlertRequest) (*emptypb.Empty, error)
	TriggerKappagen(context.Context, *TriggerKappagenRequest) (*emptypb.Empty, error)
	TriggerKappagenByEvent(context.Context, *TriggerKappagenByEventRequest) (*emptypb.Empty, error)
	TriggerShowBrb(context.Context, *TriggerShowBrbRequest) (*emptypb.Empty, error)
	TriggerHideBrb(context.Context, *TriggerHideBrbRequest) (*emptypb.Empty, error)
	RefreshOverlaySettings(context.Context, *RefreshOverlaysRequest) (*emptypb.Empty, error)
	DudesJump(context.Context, *DudesJumpRequest) (*emptypb.Empty, error)
	DudesUserPunished(context.Context, *DudesUserPunishedRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedWebsocketServer()
}

// UnimplementedWebsocketServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWebsocketServer struct{}

func (UnimplementedWebsocketServer) YoutubeAddSongToQueue(context.Context, *YoutubeAddSongToQueueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YoutubeAddSongToQueue not implemented")
}
func (UnimplementedWebsocketServer) YoutubeRemoveSongToQueue(context.Context, *YoutubeRemoveSongFromQueueRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method YoutubeRemoveSongToQueue not implemented")
}
func (UnimplementedWebsocketServer) ObsCheckIsUserConnected(context.Context, *ObsCheckUserConnectedRequest) (*ObsCheckUserConnectedResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsCheckIsUserConnected not implemented")
}
func (UnimplementedWebsocketServer) ObsSetScene(context.Context, *ObsSetSceneMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsSetScene not implemented")
}
func (UnimplementedWebsocketServer) ObsToggleSource(context.Context, *ObsToggleSourceMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsToggleSource not implemented")
}
func (UnimplementedWebsocketServer) ObsToggleAudio(context.Context, *ObsToggleAudioMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsToggleAudio not implemented")
}
func (UnimplementedWebsocketServer) ObsAudioSetVolume(context.Context, *ObsAudioSetVolumeMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsAudioSetVolume not implemented")
}
func (UnimplementedWebsocketServer) ObsAudioIncreaseVolume(context.Context, *ObsAudioIncreaseVolumeMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsAudioIncreaseVolume not implemented")
}
func (UnimplementedWebsocketServer) ObsAudioDecreaseVolume(context.Context, *ObsAudioDecreaseVolumeMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsAudioDecreaseVolume not implemented")
}
func (UnimplementedWebsocketServer) ObsAudioEnable(context.Context, *ObsAudioDisableOrEnableMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsAudioEnable not implemented")
}
func (UnimplementedWebsocketServer) ObsAudioDisable(context.Context, *ObsAudioDisableOrEnableMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsAudioDisable not implemented")
}
func (UnimplementedWebsocketServer) ObsStopStream(context.Context, *ObsStopOrStartStream) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsStopStream not implemented")
}
func (UnimplementedWebsocketServer) ObsStartStream(context.Context, *ObsStopOrStartStream) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ObsStartStream not implemented")
}
func (UnimplementedWebsocketServer) TextToSpeechSay(context.Context, *TTSMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextToSpeechSay not implemented")
}
func (UnimplementedWebsocketServer) TextToSpeechSkip(context.Context, *TTSSkipMessage) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TextToSpeechSkip not implemented")
}
func (UnimplementedWebsocketServer) TriggerAlert(context.Context, *TriggerAlertRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerAlert not implemented")
}
func (UnimplementedWebsocketServer) TriggerKappagen(context.Context, *TriggerKappagenRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerKappagen not implemented")
}
func (UnimplementedWebsocketServer) TriggerKappagenByEvent(context.Context, *TriggerKappagenByEventRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerKappagenByEvent not implemented")
}
func (UnimplementedWebsocketServer) TriggerShowBrb(context.Context, *TriggerShowBrbRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerShowBrb not implemented")
}
func (UnimplementedWebsocketServer) TriggerHideBrb(context.Context, *TriggerHideBrbRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method TriggerHideBrb not implemented")
}
func (UnimplementedWebsocketServer) RefreshOverlaySettings(context.Context, *RefreshOverlaysRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefreshOverlaySettings not implemented")
}
func (UnimplementedWebsocketServer) DudesJump(context.Context, *DudesJumpRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DudesJump not implemented")
}
func (UnimplementedWebsocketServer) DudesUserPunished(context.Context, *DudesUserPunishedRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DudesUserPunished not implemented")
}
func (UnimplementedWebsocketServer) mustEmbedUnimplementedWebsocketServer() {}
func (UnimplementedWebsocketServer) testEmbeddedByValue()                   {}

// UnsafeWebsocketServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebsocketServer will
// result in compilation errors.
type UnsafeWebsocketServer interface {
	mustEmbedUnimplementedWebsocketServer()
}

func RegisterWebsocketServer(s grpc.ServiceRegistrar, srv WebsocketServer) {
	// If the following call pancis, it indicates UnimplementedWebsocketServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Websocket_ServiceDesc, srv)
}

func _Websocket_YoutubeAddSongToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YoutubeAddSongToQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).YoutubeAddSongToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_YoutubeAddSongToQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).YoutubeAddSongToQueue(ctx, req.(*YoutubeAddSongToQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_YoutubeRemoveSongToQueue_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(YoutubeRemoveSongFromQueueRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).YoutubeRemoveSongToQueue(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_YoutubeRemoveSongToQueue_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).YoutubeRemoveSongToQueue(ctx, req.(*YoutubeRemoveSongFromQueueRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsCheckIsUserConnected_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsCheckUserConnectedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsCheckIsUserConnected(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_ObsCheckIsUserConnected_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsCheckIsUserConnected(ctx, req.(*ObsCheckUserConnectedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsSetScene_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsSetSceneMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsSetScene(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_ObsSetScene_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsSetScene(ctx, req.(*ObsSetSceneMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsToggleSource_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsToggleSourceMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsToggleSource(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_ObsToggleSource_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsToggleSource(ctx, req.(*ObsToggleSourceMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsToggleAudio_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsToggleAudioMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsToggleAudio(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_ObsToggleAudio_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsToggleAudio(ctx, req.(*ObsToggleAudioMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsAudioSetVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsAudioSetVolumeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsAudioSetVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_ObsAudioSetVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsAudioSetVolume(ctx, req.(*ObsAudioSetVolumeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsAudioIncreaseVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsAudioIncreaseVolumeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsAudioIncreaseVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_ObsAudioIncreaseVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsAudioIncreaseVolume(ctx, req.(*ObsAudioIncreaseVolumeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsAudioDecreaseVolume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsAudioDecreaseVolumeMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsAudioDecreaseVolume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_ObsAudioDecreaseVolume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsAudioDecreaseVolume(ctx, req.(*ObsAudioDecreaseVolumeMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsAudioEnable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsAudioDisableOrEnableMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsAudioEnable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_ObsAudioEnable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsAudioEnable(ctx, req.(*ObsAudioDisableOrEnableMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsAudioDisable_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsAudioDisableOrEnableMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsAudioDisable(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_ObsAudioDisable_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsAudioDisable(ctx, req.(*ObsAudioDisableOrEnableMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsStopStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsStopOrStartStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsStopStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_ObsStopStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsStopStream(ctx, req.(*ObsStopOrStartStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_ObsStartStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ObsStopOrStartStream)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).ObsStartStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_ObsStartStream_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).ObsStartStream(ctx, req.(*ObsStopOrStartStream))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_TextToSpeechSay_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TTSMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).TextToSpeechSay(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_TextToSpeechSay_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).TextToSpeechSay(ctx, req.(*TTSMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_TextToSpeechSkip_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TTSSkipMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).TextToSpeechSkip(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_TextToSpeechSkip_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).TextToSpeechSkip(ctx, req.(*TTSSkipMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_TriggerAlert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerAlertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).TriggerAlert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_TriggerAlert_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).TriggerAlert(ctx, req.(*TriggerAlertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_TriggerKappagen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerKappagenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).TriggerKappagen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_TriggerKappagen_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).TriggerKappagen(ctx, req.(*TriggerKappagenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_TriggerKappagenByEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerKappagenByEventRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).TriggerKappagenByEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_TriggerKappagenByEvent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).TriggerKappagenByEvent(ctx, req.(*TriggerKappagenByEventRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_TriggerShowBrb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerShowBrbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).TriggerShowBrb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_TriggerShowBrb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).TriggerShowBrb(ctx, req.(*TriggerShowBrbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_TriggerHideBrb_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TriggerHideBrbRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).TriggerHideBrb(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_TriggerHideBrb_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).TriggerHideBrb(ctx, req.(*TriggerHideBrbRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_RefreshOverlaySettings_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RefreshOverlaysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).RefreshOverlaySettings(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_RefreshOverlaySettings_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).RefreshOverlaySettings(ctx, req.(*RefreshOverlaysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_DudesJump_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DudesJumpRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).DudesJump(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_DudesJump_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).DudesJump(ctx, req.(*DudesJumpRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Websocket_DudesUserPunished_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DudesUserPunishedRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebsocketServer).DudesUserPunished(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Websocket_DudesUserPunished_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebsocketServer).DudesUserPunished(ctx, req.(*DudesUserPunishedRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Websocket_ServiceDesc is the grpc.ServiceDesc for Websocket service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Websocket_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "websockets.Websocket",
	HandlerType: (*WebsocketServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "YoutubeAddSongToQueue",
			Handler:    _Websocket_YoutubeAddSongToQueue_Handler,
		},
		{
			MethodName: "YoutubeRemoveSongToQueue",
			Handler:    _Websocket_YoutubeRemoveSongToQueue_Handler,
		},
		{
			MethodName: "ObsCheckIsUserConnected",
			Handler:    _Websocket_ObsCheckIsUserConnected_Handler,
		},
		{
			MethodName: "ObsSetScene",
			Handler:    _Websocket_ObsSetScene_Handler,
		},
		{
			MethodName: "ObsToggleSource",
			Handler:    _Websocket_ObsToggleSource_Handler,
		},
		{
			MethodName: "ObsToggleAudio",
			Handler:    _Websocket_ObsToggleAudio_Handler,
		},
		{
			MethodName: "ObsAudioSetVolume",
			Handler:    _Websocket_ObsAudioSetVolume_Handler,
		},
		{
			MethodName: "ObsAudioIncreaseVolume",
			Handler:    _Websocket_ObsAudioIncreaseVolume_Handler,
		},
		{
			MethodName: "ObsAudioDecreaseVolume",
			Handler:    _Websocket_ObsAudioDecreaseVolume_Handler,
		},
		{
			MethodName: "ObsAudioEnable",
			Handler:    _Websocket_ObsAudioEnable_Handler,
		},
		{
			MethodName: "ObsAudioDisable",
			Handler:    _Websocket_ObsAudioDisable_Handler,
		},
		{
			MethodName: "ObsStopStream",
			Handler:    _Websocket_ObsStopStream_Handler,
		},
		{
			MethodName: "ObsStartStream",
			Handler:    _Websocket_ObsStartStream_Handler,
		},
		{
			MethodName: "TextToSpeechSay",
			Handler:    _Websocket_TextToSpeechSay_Handler,
		},
		{
			MethodName: "TextToSpeechSkip",
			Handler:    _Websocket_TextToSpeechSkip_Handler,
		},
		{
			MethodName: "TriggerAlert",
			Handler:    _Websocket_TriggerAlert_Handler,
		},
		{
			MethodName: "TriggerKappagen",
			Handler:    _Websocket_TriggerKappagen_Handler,
		},
		{
			MethodName: "TriggerKappagenByEvent",
			Handler:    _Websocket_TriggerKappagenByEvent_Handler,
		},
		{
			MethodName: "TriggerShowBrb",
			Handler:    _Websocket_TriggerShowBrb_Handler,
		},
		{
			MethodName: "TriggerHideBrb",
			Handler:    _Websocket_TriggerHideBrb_Handler,
		},
		{
			MethodName: "RefreshOverlaySettings",
			Handler:    _Websocket_RefreshOverlaySettings_Handler,
		},
		{
			MethodName: "DudesJump",
			Handler:    _Websocket_DudesJump_Handler,
		},
		{
			MethodName: "DudesUserPunished",
			Handler:    _Websocket_DudesUserPunished_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "websockets/websockets.proto",
}
